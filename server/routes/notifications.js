const express = require('express');
const Joi = require('joi');
const db = require('../config/database');
const { authenticateToken } = require('../middleware/auth');
const nodemailer = require('nodemailer');
const TelegramBot = require('node-telegram-bot-api');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email
const emailTransporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT || 587),
  secure: false,
  auth: process.env.SMTP_USER && process.env.SMTP_PASS ? {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  } : undefined
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
let telegramBot = null;
if (process.env.TELEGRAM_BOT_TOKEN) {
  telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
}

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const notificationSchema = Joi.object({
  user_id: Joi.number().integer().allow(null),
  type: Joi.string().valid('info', 'warning', 'error', 'success').required(),
  title: Joi.string().required(),
  message: Joi.string().required(),
  data: Joi.object().allow(null)
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      type,
      is_read,
      sort_by = 'created_at',
      sort_order = 'desc'
    } = req.query;

    const offset = (page - 1) * limit;
    let whereConditions = ['(user_id = $1 OR user_id IS NULL)'];
    let queryParams = [req.user.id];
    let paramCount = 1;

    // –§–∏–ª—å—Ç—Ä—ã
    if (type) {
      paramCount++;
      whereConditions.push(`type = $${paramCount}`);
      queryParams.push(type);
    }

    if (is_read !== undefined) {
      paramCount++;
      whereConditions.push(`is_read = $${paramCount}`);
      queryParams.push(is_read === 'true');
    }

    const whereClause = `WHERE ${whereConditions.join(' AND ')}`;

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const countQuery = `SELECT COUNT(*) as total FROM notifications ${whereClause}`;
    const countResult = await db.query(countQuery, queryParams);
    const total = parseInt(countResult.rows[0].total);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    paramCount++;
    const notificationsQuery = `
      SELECT * FROM notifications 
      ${whereClause}
      ORDER BY ${sort_by} ${sort_order.toUpperCase()}
      LIMIT $${paramCount} OFFSET $${paramCount + 1}
    `;
    queryParams.push(limit, offset);

    const notificationsResult = await db.query(notificationsQuery, queryParams);

    res.json({
      notifications: notificationsResult.rows,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { error, value } = notificationSchema.validate(req.body);
    if (error) {
      return res.status(400).json({ message: error.details[0].message });
    }

    const { user_id, type, title, message, data } = value;

    const result = await db.query(`
      INSERT INTO notifications (user_id, type, title, message, data)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `, [user_id, type, title, message, data ? JSON.stringify(data) : null]);

    res.status(201).json({
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
      notification: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
router.put('/:id/read', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const result = await db.query(`
      UPDATE notifications 
      SET is_read = true 
      WHERE id = $1 AND (user_id = $2 OR user_id IS NULL)
      RETURNING *
    `, [id, req.user.id]);

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ',
      notification: result.rows[0]
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
router.put('/mark-all-read', authenticateToken, async (req, res) => {
  try {
    await db.query(`
      UPDATE notifications 
      SET is_read = true 
      WHERE (user_id = $1 OR user_id IS NULL) AND is_read = false
    `, [req.user.id]);

    res.json({ message: '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/send-email', authenticateToken, async (req, res) => {
  try {
    const { to, subject, text, html } = req.body;

    if (!to || !subject || !text) {
      return res.status(400).json({ message: '–ü–æ–ª—è to, subject –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const mailOptions = {
      from: process.env.SMTP_USER,
      to: to,
      subject: subject,
      text: text,
      html: html
    };

    await emailTransporter.sendMail(mailOptions);

    res.json({ message: 'Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/send-telegram', authenticateToken, async (req, res) => {
  try {
    const { chat_id, message } = req.body;

    if (!chat_id || !message) {
      return res.status(400).json({ message: '–ü–æ–ª—è chat_id –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (!telegramBot) {
      return res.status(400).json({ message: 'Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    await telegramBot.sendMessage(chat_id, message);

    res.json({ message: 'Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const statsResult = await db.query(`
      SELECT 
        COUNT(*) as total_notifications,
        COUNT(CASE WHEN is_read = false THEN 1 END) as unread_count,
        COUNT(CASE WHEN type = 'info' THEN 1 END) as info_count,
        COUNT(CASE WHEN type = 'warning' THEN 1 END) as warning_count,
        COUNT(CASE WHEN type = 'error' THEN 1 END) as error_count,
        COUNT(CASE WHEN type = 'success' THEN 1 END) as success_count
      FROM notifications 
      WHERE user_id = $1 OR user_id IS NULL
    `, [req.user.id]);

    res.json({ stats: statsResult.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
const createOrderNotification = async (orderId, orderNumber, customerName) => {
  try {
    await db.query(`
      INSERT INTO notifications (user_id, type, title, message, data)
      VALUES (NULL, 'info', '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${orderNumber} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${customerName}', $1)
    `, [JSON.stringify({ order_id: orderId, order_number: orderNumber })]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (telegramBot && process.env.TELEGRAM_CHAT_ID) {
      await telegramBot.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n–ù–æ–º–µ—Ä: ${orderNumber}\n–ö–ª–∏–µ–Ω—Ç: ${customerName}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRM –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ:', error);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
const createStatusChangeNotification = async (orderId, orderNumber, oldStatus, newStatus) => {
  try {
    const statusNames = {
      'new': '–ù–æ–≤—ã–π',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'in_production': '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ',
      'ready': '–ì–æ—Ç–æ–≤',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };

    await db.query(`
      INSERT INTO notifications (user_id, type, title, message, data)
      VALUES (NULL, 'info', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞', '–ó–∞–∫–∞–∑ ${orderNumber} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å —Å "${statusNames[oldStatus]}" –Ω–∞ "${statusNames[newStatus]}"', $1)
    `, [JSON.stringify({ order_id: orderId, order_number: orderNumber, old_status: oldStatus, new_status: newStatus })]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (telegramBot && process.env.TELEGRAM_CHAT_ID && ['ready', 'shipped', 'delivered'].includes(newStatus)) {
      await telegramBot.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ó–∞–∫–∞–∑: ${orderNumber}\n–°—Ç–∞—Ç—É—Å: ${statusNames[newStatus]}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ CRM –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
const createLowStockNotification = async (materialName, currentStock, minStock) => {
  try {
    await db.query(`
      INSERT INTO notifications (user_id, type, title, message, data)
      VALUES (NULL, 'warning', '–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏', '–ú–∞—Ç–µ—Ä–∏–∞–ª "${materialName}" –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${currentStock}, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minStock}', $1)
    `, [JSON.stringify({ material_name: materialName, current_stock: currentStock, min_stock: minStock })]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if (telegramBot && process.env.TELEGRAM_CHAT_ID) {
      await telegramBot.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏!\n\n–ú–∞—Ç–µ—Ä–∏–∞–ª: ${materialName}\n–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: ${currentStock}\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: ${minStock}\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥.`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö:', error);
  }
};

module.exports = {
  router,
  createOrderNotification,
  createStatusChangeNotification,
  createLowStockNotification
};
