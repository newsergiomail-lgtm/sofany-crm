const db = require('../config/database');

const analyzeOrders = async () => {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const ordersResult = await db.query(`
      SELECT 
        o.*,
        c.name as customer_name,
        c.email as customer_email,
        c.phone as customer_phone,
        c.address as customer_address
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      ORDER BY o.order_number
    `);

    const orders = ordersResult.rows;
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: ${orders.length}\n`);

    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ç–∏–ø—É
    const calcOrders = orders.filter(o => o.order_number.startsWith('CALC-'));
    const crmOrders = orders.filter(o => o.order_number.startsWith('CRM-'));

    console.log(`üßÆ –ó–∞–∫–∞–∑—ã –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: ${calcOrders.length}`);
    console.log(`üíº –ó–∞–∫–∞–∑—ã –∏–∑ CRM: ${crmOrders.length}\n`);

    const issues = {
      calcOrders: [],
      crmOrders: [],
      common: [],
      critical: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    console.log('üîç –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–û–í –ò–ó –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:');
    console.log('=' .repeat(50));

    calcOrders.forEach((order, index) => {
      const orderIssues = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      if (!order.product_name) orderIssues.push('‚ùå product_name –ø—É—Å—Ç–æ–µ');
      if (!order.customer_name) orderIssues.push('‚ùå customer_name –ø—É—Å—Ç–æ–µ');
      if (!order.customer_email) orderIssues.push('‚ùå customer_email –ø—É—Å—Ç–æ–µ');
      if (!order.customer_phone) orderIssues.push('‚ùå customer_phone –ø—É—Å—Ç–æ–µ');
      if (!order.total_amount || order.total_amount <= 0) orderIssues.push('‚ùå total_amount –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ');
      if (!order.delivery_date) orderIssues.push('‚ùå delivery_date –ø—É—Å—Ç–æ–µ');
      if (!order.project_description) orderIssues.push('‚ùå project_description –ø—É—Å—Ç–æ–µ');
      if (!order.delivery_address) orderIssues.push('‚ùå delivery_address –ø—É—Å—Ç–æ–µ');
      if (order.has_elevator === null) orderIssues.push('‚ùå has_elevator –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
      if (!order.floor) orderIssues.push('‚ùå floor –ø—É—Å—Ç–æ–µ');
      if (!order.delivery_notes) orderIssues.push('‚ùå delivery_notes –ø—É—Å—Ç–æ–µ');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      if (!order.calculator_data) {
        orderIssues.push('üî¥ –ö–†–ò–¢–ò–ß–ù–û: calculator_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        issues.critical.push(`${order.order_number}: calculator_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      } else {
        try {
          const calcData = typeof order.calculator_data === 'string' 
            ? JSON.parse(order.calculator_data) 
            : order.calculator_data;
          
          if (!calcData.customer) orderIssues.push('‚ùå calculator_data.customer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          if (!calcData.config) orderIssues.push('‚ùå calculator_data.config –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          if (!calcData.bom) orderIssues.push('‚ùå calculator_data.bom –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          if (!calcData.pricing) orderIssues.push('‚ùå calculator_data.pricing –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
          if (calcData.customer) {
            if (!calcData.customer.name) orderIssues.push('‚ùå calculator_data.customer.name –ø—É—Å—Ç–æ–µ');
            if (!calcData.customer.phone) orderIssues.push('‚ùå calculator_data.customer.phone –ø—É—Å—Ç–æ–µ');
          }
          
          if (calcData.pricing) {
            if (!calcData.pricing.price) orderIssues.push('‚ùå calculator_data.pricing.price –ø—É—Å—Ç–æ–µ');
            if (!calcData.pricing.total_cost) orderIssues.push('‚ùå calculator_data.pricing.total_cost –ø—É—Å—Ç–æ–µ');
          }
        } catch (e) {
          orderIssues.push('üî¥ –ö–†–ò–¢–ò–ß–ù–û: calculator_data –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON');
          issues.critical.push(`${order.order_number}: calculator_data –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON`);
        }
      }

      if (orderIssues.length > 0) {
        issues.calcOrders.push({
          order_number: order.order_number,
          issues: orderIssues
        });
        console.log(`\nüìã ${order.order_number}: ${order.product_name}`);
        orderIssues.forEach(issue => console.log(`  ${issue}`));
      } else {
        console.log(`\n‚úÖ ${order.order_number}: ${order.product_name} - –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ CRM
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–û–í –ò–ó CRM:');
    console.log('=' .repeat(50));

    crmOrders.forEach((order, index) => {
      const orderIssues = [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      if (!order.product_name) orderIssues.push('‚ùå product_name –ø—É—Å—Ç–æ–µ');
      if (!order.customer_name) orderIssues.push('‚ùå customer_name –ø—É—Å—Ç–æ–µ');
      if (!order.customer_email) orderIssues.push('‚ùå customer_email –ø—É—Å—Ç–æ–µ');
      if (!order.customer_phone) orderIssues.push('‚ùå customer_phone –ø—É—Å—Ç–æ–µ');
      if (!order.total_amount || order.total_amount <= 0) orderIssues.push('‚ùå total_amount –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ');
      if (!order.delivery_date) orderIssues.push('‚ùå delivery_date –ø—É—Å—Ç–æ–µ');
      if (!order.project_description) orderIssues.push('‚ùå project_description –ø—É—Å—Ç–æ–µ');
      if (!order.delivery_address) orderIssues.push('‚ùå delivery_address –ø—É—Å—Ç–æ–µ');
      if (order.has_elevator === null) orderIssues.push('‚ùå has_elevator –Ω–µ —É–∫–∞–∑–∞–Ω–æ');
      if (!order.floor) orderIssues.push('‚ùå floor –ø—É—Å—Ç–æ–µ');
      if (!order.delivery_notes) orderIssues.push('‚ùå delivery_notes –ø—É—Å—Ç–æ–µ');

      // –î–ª—è CRM –∑–∞–∫–∞–∑–æ–≤ calculator_data –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null
      if (order.calculator_data) {
        orderIssues.push('‚ö†Ô∏è  calculator_data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null –¥–ª—è CRM –∑–∞–∫–∞–∑–æ–≤)');
      }

      if (orderIssues.length > 0) {
        issues.crmOrders.push({
          order_number: order.order_number,
          issues: orderIssues
        });
        console.log(`\nüìã ${order.order_number}: ${order.product_name}`);
        orderIssues.forEach(issue => console.log(`  ${issue}`));
      } else {
        console.log(`\n‚úÖ ${order.order_number}: ${order.product_name} - –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –ó–ê–ö–ê–ó–û–í:');
    console.log('=' .repeat(50));

    for (const order of orders) {
      const itemsResult = await db.query('SELECT * FROM order_items WHERE order_id = $1', [order.id]);
      const items = itemsResult.rows;
      
      if (items.length === 0) {
        console.log(`‚ùå ${order.order_number}: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞`);
        issues.common.push(`${order.order_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞`);
      } else {
        console.log(`‚úÖ ${order.order_number}: ${items.length} –ø–æ–∑–∏—Ü–∏–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        items.forEach((item, index) => {
          const itemIssues = [];
          if (!item.name) itemIssues.push('–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
          if (!item.description) itemIssues.push('–æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
          if (!item.quantity || item.quantity <= 0) itemIssues.push('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ');
          if (!item.unit_price || item.unit_price <= 0) itemIssues.push('—Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è');
          if (!item.total_price || item.total_price <= 0) itemIssues.push('–æ–±—â–∞—è —Ü–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è');
          
          if (itemIssues.length > 0) {
            console.log(`  ‚ùå –ü–æ–∑–∏—Ü–∏—è ${index + 1}: ${itemIssues.join(', ')}`);
            issues.common.push(`${order.order_number}, –ø–æ–∑–∏—Ü–∏—è ${index + 1}: ${itemIssues.join(', ')}`);
          }
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –°–¢–ê–¢–£–°–û–í:');
    console.log('=' .repeat(50));

    for (const order of orders) {
      const historyResult = await db.query('SELECT * FROM order_status_history WHERE order_id = $1 ORDER BY created_at', [order.id]);
      const history = historyResult.rows;
      
      if (history.length === 0) {
        console.log(`‚ùå ${order.order_number}: –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤`);
        issues.common.push(`${order.order_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤`);
      } else {
        console.log(`‚úÖ ${order.order_number}: ${history.length} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–• –û–ü–ï–†–ê–¶–ò–ô:');
    console.log('=' .repeat(50));

    for (const order of orders) {
      const operationsResult = await db.query('SELECT * FROM production_operations WHERE order_id = $1', [order.id]);
      const operations = operationsResult.rows;
      
      if (operations.length === 0) {
        console.log(`‚ùå ${order.order_number}: –Ω–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
        issues.common.push(`${order.order_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏`);
      } else {
        console.log(`‚úÖ ${order.order_number}: ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n\nüîç –ê–ù–ê–õ–ò–ó –§–ò–ù–ê–ù–°–û–í–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:');
    console.log('=' .repeat(50));

    for (const order of orders) {
      const transactionsResult = await db.query('SELECT * FROM financial_transactions WHERE order_id = $1', [order.id]);
      const transactions = transactionsResult.rows;
      
      if (transactions.length === 0) {
        console.log(`‚ùå ${order.order_number}: –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        issues.common.push(`${order.order_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
      } else {
        console.log(`‚úÖ ${order.order_number}: ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('=' .repeat(50));
    
    console.log(`\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${issues.critical.length}):`);
    issues.critical.forEach(issue => console.log(`  ‚Ä¢ ${issue}`));
    
    console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –í –ó–ê–ö–ê–ó–ê–• –ò–ó –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê (${issues.calcOrders.length}):`);
    issues.calcOrders.forEach(order => {
      console.log(`  ‚Ä¢ ${order.order_number}: ${order.issues.length} –ø—Ä–æ–±–ª–µ–º`);
    });
    
    console.log(`\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –í –ó–ê–ö–ê–ó–ê–• –ò–ó CRM (${issues.crmOrders.length}):`);
    issues.crmOrders.forEach(order => {
      console.log(`  ‚Ä¢ ${order.order_number}: ${order.issues.length} –ø—Ä–æ–±–ª–µ–º`);
    });
    
    console.log(`\n‚ö†Ô∏è  –û–ë–©–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${issues.common.length}):`);
    issues.common.forEach(issue => console.log(`  ‚Ä¢ ${issue}`));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const report = {
      summary: {
        total_orders: orders.length,
        calc_orders: calcOrders.length,
        crm_orders: crmOrders.length,
        critical_issues: issues.critical.length,
        calc_issues: issues.calcOrders.length,
        crm_issues: issues.crmOrders.length,
        common_issues: issues.common.length
      },
      issues: issues,
      orders_analysis: orders.map(order => ({
        order_number: order.order_number,
        product_name: order.product_name,
        customer_name: order.customer_name,
        total_amount: order.total_amount,
        status: order.status,
        has_calculator_data: !!order.calculator_data,
        has_items: false, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        has_history: false, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        has_operations: false, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        has_transactions: false // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      }))
    };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    for (let i = 0; i < report.orders_analysis.length; i++) {
      const order = orders[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
      const itemsResult = await db.query('SELECT COUNT(*) as count FROM order_items WHERE order_id = $1', [order.id]);
      report.orders_analysis[i].has_items = parseInt(itemsResult.rows[0].count) > 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      const historyResult = await db.query('SELECT COUNT(*) as count FROM order_status_history WHERE order_id = $1', [order.id]);
      report.orders_analysis[i].has_history = parseInt(historyResult.rows[0].count) > 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationsResult = await db.query('SELECT COUNT(*) as count FROM production_operations WHERE order_id = $1', [order.id]);
      report.orders_analysis[i].has_operations = parseInt(operationsResult.rows[0].count) > 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transactionsResult = await db.query('SELECT COUNT(*) as count FROM financial_transactions WHERE order_id = $1', [order.id]);
      report.orders_analysis[i].has_transactions = parseInt(transactionsResult.rows[0].count) > 0;
    }

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–∫–∞–∑–æ–≤:', error);
  } finally {
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeOrders();
