const fetch = require('node-fetch');

async function debugAPI() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const [ordersRes, operationsRes, employeesRes] = await Promise.all([
      fetch('http://localhost:5000/api/simple-work/orders'),
      fetch('http://localhost:5000/api/simple-work/operations'),
      fetch('http://localhost:5000/api/simple-work/employees')
    ]);

    const orders = await ordersRes.json();
    const operations = await operationsRes.json();
    const employees = await employeesRes.json();

    console.log(`üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${orders.length} –∑–∞–∫–∞–∑–æ–≤, ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π, ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const order = orders[0];
    const operation = operations[0];
    const employee = employees[0];

    console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`–ó–∞–∫–∞–∑: ID=${order.id}, –ù–æ–º–µ—Ä=${order.order_number}`);
    console.log(`–û–ø–µ—Ä–∞—Ü–∏—è: ID=${operation.id}, –ù–∞–∑–≤–∞–Ω–∏–µ=${operation.name}, –¶–µ–Ω–∞=${operation.price_per_unit}`);
    console.log(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ID=${employee.id}, –ò–º—è=${employee.first_name} ${employee.last_name}`);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç—ã
    const workData = {
      order_id: order.id,
      operation_id: operation.id,
      employee_id: employee.id,
      quantity: 1,
      start_time: '09:00',
      end_time: '10:00'
    };

    console.log('\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
    console.log('–î–∞–Ω–Ω—ã–µ:', workData);

    const response = await fetch('http://localhost:5000/api/simple-work/work', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workData)
    });

    const result = await response.json();
    
    console.log('\nüì§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(`–°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);

    if (response.ok) {
      console.log('\n‚úÖ –£–°–ü–ï–•! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('\n‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ–±–ª–µ–º–∞ —Å API');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

debugAPI();






