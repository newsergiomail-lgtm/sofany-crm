const express = require('express');
const Joi = require('joi');
const multer = require('multer');
const db = require('../config/database');
const { authenticateToken, requireRole } = require('../middleware/auth');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  },
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    const allowedTypes = /jpeg|jpg|png|gif|pdf|dwg|dxf|skp/;
    const allowedMimeTypes = /image\/|application\/pdf|application\/dwg|application\/dxf|application\/x-koan/;
    const extname = allowedTypes.test(file.originalname.toLowerCase());
    const mimetype = allowedMimeTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      console.log('–û—Ç–∫–ª–æ–Ω–µ–Ω —Ñ–∞–π–ª:', file.originalname, '—Ç–∏–ø:', file.mimetype);
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
async function generateOrderNumber(client) {
  try {
    console.log('üî¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const result = await client.query(`
      SELECT order_number 
      FROM orders 
      WHERE order_number LIKE 'SOF-%' 
      ORDER BY order_number DESC 
      LIMIT 1
    `);
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', result.rows.length);
    if (result.rows.length > 0) {
      console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä:', result.rows[0].order_number);
    }
    
    let nextNumber = 1;
    
    if (result.rows.length > 0) {
      const lastOrderNumber = result.rows[0].order_number;
      const numberPart = lastOrderNumber.substring(4); // –£–±–∏—Ä–∞–µ–º "SOF-"
      
      console.log('üîç –ß–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞:', numberPart);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º (–Ω–µ timestamp)
      if (/^\d{1,5}$/.test(numberPart)) {
        nextNumber = parseInt(numberPart) + 1;
        console.log('‚úÖ –ß–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä, —Å–ª–µ–¥—É—é—â–∏–π:', nextNumber);
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ timestamp, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
        nextNumber = 1;
        console.log('‚ö†Ô∏è Timestamp –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1');
      }
    } else {
      console.log('üÜï –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1');
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
    let orderNumber;
    let attempts = 0;
    const maxAttempts = 100;
    
    do {
      attempts++;
      
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 9999, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ 5-–∑–Ω–∞—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
      if (nextNumber > 9999) {
        orderNumber = `SOF-${String(nextNumber).padStart(5, '0')}`;
      } else {
        orderNumber = `SOF-${String(nextNumber).padStart(4, '0')}`;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä
      const checkResult = await client.query(
        'SELECT id FROM orders WHERE order_number = $1',
        [orderNumber]
      );
      
      if (checkResult.rows.length === 0) {
        // –ù–æ–º–µ—Ä —É–Ω–∏–∫–∞–ª–µ–Ω
        console.log('üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:', orderNumber);
        return orderNumber;
      } else {
        // –ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        console.log('‚ö†Ô∏è –ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', orderNumber, '–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π');
        nextNumber++;
      }
    } while (attempts < maxAttempts);
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp');
    return `SOF-${Date.now()}`;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞:', error);
    // Fallback –Ω–∞ timestamp –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    return `SOF-${Date.now()}`;
  }
}

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const orderSchema = Joi.object({
  customer_id: Joi.number().integer().required(),
  product_name: Joi.string().allow(''),
  status: Joi.string().valid('new', 'draft', 'confirmed', 'in_production', 'ready', 'shipped', 'delivered', 'cancelled').default('new'),
  priority: Joi.string().valid('low', 'normal', 'high', 'urgent').default('normal'),
  delivery_date: Joi.date().allow(null),
  total_amount: Joi.number().min(0).allow(null),
  prepayment_amount: Joi.number().min(0).allow(null),
  paid_amount: Joi.number().min(0).allow(null),
  notes: Joi.string().allow(''),
  // –ü–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ —Å —Ñ–æ—Ä–º—ã) - —É–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã customers
  // –ü–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
  delivery_address: Joi.string().allow('', null),
  has_elevator: Joi.boolean().allow(null),
  floor: Joi.alternatives().try(Joi.number().integer(), Joi.string()).allow('', null),
  delivery_notes: Joi.string().allow('', null),
  project_description: Joi.string().allow('', null),
  short_description: Joi.string().allow('', null),
  detailed_description: Joi.string().allow('', null),
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  calculator_data: Joi.any().optional(),
  items: Joi.array().items(Joi.object({
    name: Joi.string().required(),
    description: Joi.string().allow(''),
    quantity: Joi.number().integer().min(1).required(),
    unit_price: Joi.number().min(0).required()
  })).min(1).required()
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–Ω–±–∞–Ω–∞ (–Ω–æ–≤—ã–µ –∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ)
router.get('/kanban', authenticateToken, async (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–±–∞–Ω–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_production' –∏ 'production'
    const result = await db.query(`
      SELECT 
        o.id,
        o.order_number,
        o.product_name,
        o.status,
        o.priority,
        o.total_amount,
        o.paid_amount,
        o.delivery_date,
        o.notes,
        o.created_at,
        o.updated_at,
        o.project_description,
        COALESCE(o.product_name, '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') as short_description,
        o.project_description as detailed_description,
        o.delivery_address,
        o.has_elevator,
        o.floor,
        c.name as customer_name,
        c.phone as customer_phone,
        c.email as customer_email,
        c.company as customer_company,
        po.production_stage,
        po.status as production_status,
        po.created_at as stage_started_at
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      LEFT JOIN production_operations po ON o.id = po.order_id 
        AND po.status = 'in_progress' 
        AND po.operation_type = 'produce'
      WHERE o.status IN ('in_production', 'production')
      ORDER BY o.priority DESC, o.created_at ASC
    `);
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', result.rows.length);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const columnsResult = await db.query(`
      SELECT * FROM kanban_columns 
      WHERE is_active = true 
      ORDER BY position ASC
    `);
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫:', columnsResult.rows.length);
    
    // –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    const kanbanData = {
      columns: columnsResult.rows.map(col => ({
        id: col.id,
        title: col.title,
        color: col.color,
        type: col.type,
        cards: []
      }))
    };
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    result.rows.forEach(order => {
      let stage = order.production_stage || '–ö–ë'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–ë
      let columnIndex = kanbanData.columns.findIndex(col => col.title === stage);
      
      // –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ö–ë
      if (columnIndex === -1) {
        stage = '–ö–ë';
        columnIndex = kanbanData.columns.findIndex(col => col.title === stage);
      }
      
      if (columnIndex !== -1) {
        const card = {
          id: order.id,
          order_number: order.order_number,
          product_name: order.product_name,
          client: order.customer_name,
          phone: order.customer_phone,
          email: order.customer_email,
          company: order.customer_company,
          price: parseFloat(order.total_amount),
          prepayment: parseFloat(order.paid_amount),
          deadline: order.delivery_date,
          priority: order.priority,
          notes: order.notes,
          project_description: order.project_description,
          short_description: order.short_description,
          detailed_description: order.detailed_description,
          delivery_address: order.delivery_address,
          has_elevator: order.has_elevator,
          floor: order.floor,
          status: columnIndex + 1,
          color: "#ffffff",
          created_at: order.created_at,
          stage_started_at: order.stage_started_at
        };
        
        kanbanData.columns[columnIndex].cards.push(card);
      }
    });
    
    console.log('–ö–∞–Ω–±–∞–Ω –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã');
    res.json(kanbanData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–±–∞–Ω–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞ –≤ –∫–∞–Ω–±–∞–Ω–µ
router.put('/kanban/:orderId/stage', authenticateToken, async (req, res) => {
  try {
    const { orderId } = req.params;
    const { stage } = req.body;
    
    if (!stage) {
      return res.status(400).json({ message: '–≠—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
    }
    
    const validStages = ['–ö–ë', '–°—Ç–æ–ª—è—Ä–Ω—ã–π —Ü–µ—Ö', '–§–æ—Ä–º–æ–≤–∫–∞', '–®–≤–µ–π–Ω—ã–π —Ü–µ—Ö', '–û–±–∏–≤–∫–∞', '–°–±–æ—Ä–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞', '–û—Ç–≥—Ä—É–∂–µ–Ω'];
    if (!validStages.includes(stage)) {
      return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —ç—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞
    const stageMapping = {
      '–°—Ç–æ–ª—è—Ä–Ω—ã–π —Ü–µ—Ö': 'frame',
      '–®–≤–µ–π–Ω—ã–π —Ü–µ—Ö': 'upholstery', 
      '–§–æ—Ä–º–æ–≤–∫–∞': 'foam_molding',
      '–°–±–æ—Ä–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞': 'assembly'
    };
    
    const mappedStage = stageMapping[stage];
    if (mappedStage) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–∞–ø–∞
      const materialsResult = await db.query(
        'SELECT * FROM check_materials_for_stage($1, $2)',
        [orderId, mappedStage]
      );
      
      const blockedMaterials = materialsResult.rows.filter(m => m.is_blocked);
      if (blockedMaterials.length > 0) {
        return res.status(400).json({
          message: `–ó–∞–∫–∞–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ "${stage}"`,
          blockedMaterials: blockedMaterials.map(m => ({
            material: m.material_name,
            required: m.required_quantity,
            available: m.available_quantity,
            missing: m.missing_quantity,
            unit: m.unit
          }))
        });
      }
    }
    
    const client = await db.pool.connect();
    
    await client.query('BEGIN');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
    const existingOperation = await client.query(`
      SELECT id FROM production_operations 
      WHERE order_id = $1 AND status = 'in_progress' AND operation_type = 'produce'
    `, [orderId]);
    
    if (existingOperation.rows.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      await client.query(`
        UPDATE production_operations 
        SET production_stage = $1, updated_at = CURRENT_TIMESTAMP
        WHERE order_id = $2 AND status = 'in_progress' AND operation_type = 'produce'
      `, [stage, orderId]);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞
      await client.query(`
        INSERT INTO production_operations (order_id, operation_type, production_stage, status, created_by)
        VALUES ($1, 'produce', $2, 'in_progress', $3)
      `, [orderId, stage, req.user.id]);
    }
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ "–û—Ç–≥—Ä—É–∂–µ–Ω", –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    if (stage === '–û—Ç–≥—Ä—É–∂–µ–Ω') {
      await client.query(`
        UPDATE orders 
        SET status = 'shipped', updated_at = CURRENT_TIMESTAMP
        WHERE id = $1
      `, [orderId]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
      await client.query(`
        INSERT INTO order_status_history (order_id, status, comment, created_by)
        VALUES ($1, $2, $3, $4)
      `, [orderId, 'shipped', `–ó–∞–∫–∞–∑ –æ—Ç–≥—Ä—É–∂–µ–Ω`, req.user.id]);
    }
    
    await client.query('COMMIT');
    client.release();
    
    res.json({ message: '–≠—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      status, 
      customer_id, 
      priority,
      search,
      sort_by = 'created_at',
      sort_order = 'desc'
    } = req.query;

    const offset = (page - 1) * limit;
    let whereConditions = [];
    let queryParams = [];
    let paramCount = 0;

    // –í—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å 'cancelled')
    whereConditions.push(`o.status != 'cancelled'`);

    // –§–∏–ª—å—Ç—Ä—ã
    if (status) {
      paramCount++;
      whereConditions.push(`o.status = $${paramCount}`);
      queryParams.push(status);
    }

    if (customer_id) {
      paramCount++;
      whereConditions.push(`o.customer_id = $${paramCount}`);
      queryParams.push(customer_id);
    }

    if (priority) {
      paramCount++;
      whereConditions.push(`o.priority = $${paramCount}`);
      queryParams.push(priority);
    }

    if (search) {
      paramCount++;
      whereConditions.push(`(o.order_number ILIKE $${paramCount} OR c.name ILIKE $${paramCount})`);
      queryParams.push(`%${search}%`);
    }

    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const countQuery = `
      SELECT COUNT(*) as total
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      ${whereClause}
    `;
    const countResult = await db.query(countQuery, queryParams);
    const total = parseInt(countResult.rows[0].total);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    paramCount++;
    const ordersQuery = `
      SELECT 
        o.*,
        c.name as customer_name,
        c.email as customer_email,
        c.phone as customer_phone,
        u.name as created_by_name,
        (SELECT COUNT(*) FROM order_items WHERE order_id = o.id) as items_count,
        CASE 
          WHEN o.source = 'calc' THEN 'calc'
          ELSE 'crm'
        END as order_source
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      LEFT JOIN users u ON o.created_by = u.id
      ${whereClause}
      ORDER BY o.${sort_by} ${sort_order.toUpperCase()}
      LIMIT $${paramCount} OFFSET $${paramCount + 1}
    `;
    queryParams.push(limit, offset);

    const ordersResult = await db.query(ordersQuery, queryParams);

    res.json({
      orders: ordersResult.rows,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    const orderResult = await db.query(`
      SELECT 
        o.*,
        c.name as customer_name,
        c.email as customer_email,
        c.phone as customer_phone,
        c.company as customer_company,
        c.address as customer_address,
        u.name as created_by_name
      FROM orders o
      LEFT JOIN customers c ON o.customer_id = c.id
      LEFT JOIN users u ON o.created_by = u.id
      WHERE o.id = $1
    `, [id]);

    if (orderResult.rows.length === 0) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const order = orderResult.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    const itemsResult = await db.query(`
      SELECT * FROM order_items WHERE order_id = $1 ORDER BY id
    `, [id]);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusHistoryResult = await db.query(`
      SELECT 
        osh.*,
        u.name as created_by_name
      FROM order_status_history osh
      LEFT JOIN users u ON osh.created_by = u.id
      WHERE osh.order_id = $1
      ORDER BY osh.created_at DESC
    `, [id]);

    order.items = itemsResult.rows;
    order.status_history = statusHistoryResult.rows;

    res.json({ order });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
router.post('/', authenticateToken, async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    await client.query('BEGIN');

    const { error, value } = orderSchema.validate(req.body);
    if (error) {
      return res.status(400).json({ message: error.details[0].message });
    }

    const { 
      customer_id, product_name, status, priority, delivery_date, notes, items,
      total_amount, prepayment_amount, paid_amount,
      delivery_address, has_elevator, floor, delivery_notes, project_description,
      calculator_data
    } = value;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    const orderNumber = await generateOrderNumber(client);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderResult = await client.query(`
      INSERT INTO orders (
        order_number, customer_id, product_name, status, priority, delivery_date, notes, created_by,
        total_amount, paid_amount,
        delivery_address, has_elevator, floor, delivery_notes, project_description,
        calculator_data
      )
      VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8,
        $9, $10,
        $11, $12, $13, $14, $15,
        $16
      )
      RETURNING *
    `, [
      orderNumber, customer_id, product_name || '', status, priority, delivery_date, notes, req.user.id,
      total_amount || 0, (prepayment_amount || paid_amount) || 0,
      delivery_address || null, has_elevator ?? null, floor ?? null, delivery_notes || null, project_description || null,
      calculator_data ? JSON.stringify(calculator_data) : null
    ]);

    const order = orderResult.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    let totalAmount = 0;
    for (const item of items) {
      const totalPrice = item.quantity * item.unit_price;
      totalAmount += totalPrice;

      await client.query(`
        INSERT INTO order_items (order_id, name, description, quantity, unit_price, total_price)
        VALUES ($1, $2, $3, $4, $5, $6)
      `, [order.id, item.name, item.description, item.quantity, item.unit_price, totalPrice]);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    await client.query(`
      UPDATE orders SET total_amount = $1 WHERE id = $2
    `, [totalAmount, order.id]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    await client.query(`
      INSERT INTO order_status_history (order_id, status, comment, created_by)
      VALUES ($1, $2, $3, $4)
    `, [order.id, status, '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', req.user.id]);

    await client.query('COMMIT');

    res.status(201).json({
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      order: { ...order, total_amount: totalAmount }
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === '23505') {
      res.status(400).json({ 
        message: '–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        error: 'DUPLICATE_ORDER_NUMBER'
      });
    } else if (error.code === '23503') {
      res.status(400).json({ 
        message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        error: 'CUSTOMER_NOT_FOUND'
      });
    } else {
      res.status(500).json({ 
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: error.message
      });
    }
  } finally {
    client.release();
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.put('/:id', authenticateToken, async (req, res) => {
  const client = await db.pool.connect();
  
  try {
    await client.query('BEGIN');
    
    const { id } = req.params;
    const { 
      status, 
      priority, 
      delivery_date, 
      notes, 
      paid_amount,
      total_amount,
      prepayment_amount,
      delivery_address,
      has_elevator,
      floor,
      delivery_notes,
      project_description,
      calculator_data,
      items
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const existingOrder = await client.query('SELECT * FROM orders WHERE id = $1', [id]);
    if (existingOrder.rows.length === 0) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const currentOrder = existingOrder.rows[0];

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', {
      id,
      status,
      priority,
      delivery_date,
      total_amount,
      prepayment_amount
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ—Å—Ç—ã–º SQL –∑–∞–ø—Ä–æ—Å–æ–º
    const result = await client.query(`
      UPDATE orders 
      SET 
        status = COALESCE($1, orders.status),
        priority = COALESCE($2, orders.priority),
        delivery_date = COALESCE($3, orders.delivery_date),
        notes = COALESCE($4, orders.notes),
        paid_amount = COALESCE($5, orders.paid_amount),
        total_amount = COALESCE($6, orders.total_amount),
        delivery_address = COALESCE($7, orders.delivery_address),
        has_elevator = COALESCE($8, orders.has_elevator),
        floor = COALESCE($9, orders.floor),
        delivery_notes = COALESCE($10, orders.delivery_notes),
      project_description = COALESCE($11, orders.project_description),
      calculator_data = COALESCE($12, orders.calculator_data),
      updated_at = CURRENT_TIMESTAMP
      WHERE id = $13
      RETURNING *
    `, [
      status || null, 
      priority || null, 
      delivery_date || null, 
      notes || null, 
      paid_amount || null,
      total_amount || null,
      delivery_address || null,
      has_elevator !== undefined ? has_elevator : null,
      floor || null,
      delivery_notes || null,
      project_description || null,
      calculator_data ? JSON.stringify(calculator_data) : null,
      id
    ]);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (items && Array.isArray(items)) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      await client.query('DELETE FROM order_items WHERE order_id = $1', [id]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      for (const item of items) {
        await client.query(`
          INSERT INTO order_items (order_id, name, description, quantity, unit_price, total_price)
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          id,
          item.name,
          item.description || '',
          item.quantity || 1,
          item.unit_price || 0,
          (item.quantity || 1) * (item.unit_price || 0)
        ]);
      }
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (status && status !== currentOrder.status) {
      await client.query(`
        INSERT INTO order_status_history (order_id, status, comment, created_by)
        VALUES ($1, $2, $3, $4)
      `, [id, status, '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω', req.user.id]);
    }

    await client.query('COMMIT');

    res.json({
      message: '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω',
      order: result.rows[0]
    });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  } finally {
    client.release();
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
router.put('/:id/customer', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, phone, email, company } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const existingOrder = await db.query('SELECT * FROM orders WHERE id = $1', [id]);
    if (existingOrder.rows.length === 0) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const order = existingOrder.rows[0];

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    const result = await db.query(`
      UPDATE customers 
      SET 
        name = COALESCE($1, name),
        phone = COALESCE($2, phone),
        email = COALESCE($3, email),
        company = COALESCE($4, company),
        updated_at = CURRENT_TIMESTAMP
      WHERE id = $5
      RETURNING *
    `, [name, phone, email, company, order.customer_id]);

    res.json({ message: '–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', customer: result.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π)
router.delete('/:id', authenticateToken, requireRole(['admin']), async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
    const orderCheck = await db.query('SELECT id, status FROM orders WHERE id = $1', [id]);
    if (orderCheck.rows.length === 0) {
      return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
    const result = await db.query(
      'UPDATE orders SET status = $1, notes = COALESCE(notes, \'\') || \' [–£–î–ê–õ–ï–ù]\' WHERE id = $2 RETURNING *', 
      ['cancelled', id]
    );

    res.json({ message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
router.get('/stats/overview', authenticateToken, async (req, res) => {
  try {
    const { period = '30' } = req.query; // –¥–Ω–µ–π

    const statsResult = await db.query(`
      SELECT 
        COUNT(*) as total_orders,
        COUNT(CASE WHEN status = 'new' THEN 1 END) as new_orders,
        COUNT(CASE WHEN status = 'in_production' THEN 1 END) as in_production,
        COUNT(CASE WHEN status = 'in_sewing' THEN 1 END) as in_sewing,
        COUNT(CASE WHEN status = 'ready' THEN 1 END) as ready,
        COUNT(CASE WHEN status = 'delivered' THEN 1 END) as delivered,
        COUNT(CASE WHEN priority = 'high' OR priority = 'urgent' THEN 1 END) as urgent_orders,
        COALESCE(SUM(total_amount), 0) as total_revenue,
        COALESCE(SUM(paid_amount), 0) as total_paid,
        COALESCE(AVG(total_amount), 0) as avg_order_value
      FROM orders 
      WHERE created_at >= CURRENT_DATE - INTERVAL '${period} days'
    `);

    res.json({ stats: statsResult.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// Endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä—Ç–µ–∂–∞–º–∏

// GET /api/orders/:id/drawings - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä—Ç–µ–∂–µ–π –∑–∞–∫–∞–∑–∞
router.get('/:id/drawings', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    const result = await db.query(
      'SELECT id, file_name as original_name, file_name as filename, file_type, file_size as size, created_at FROM order_drawings WHERE order_id = $1 ORDER BY created_at DESC',
      [id]
    );
    
    res.json({ files: result.rows });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/orders/:id/drawings - –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä—Ç–µ–∂
router.post('/:id/drawings', authenticateToken, upload.single('drawing'), async (req, res) => {
  try {
    const { id } = req.params;
    const file = req.file;
    
    if (!file) {
      return res.status(400).json({ message: '–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const result = await db.query(
      'INSERT INTO order_drawings (order_id, file_name, file_data, file_type, file_size, uploaded_by) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id',
      [id, file.originalname, file.buffer, file.mimetype, file.size, req.user.id]
    );
    
    res.json({ 
      message: '–ß–µ—Ä—Ç–µ–∂ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      drawing: {
        id: result.rows[0].id,
        file_name: file.originalname,
        file_type: file.mimetype,
        file_size: file.size
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä—Ç–µ–∂–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/orders/:id/drawings/:drawingId - –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä—Ç–µ–∂
router.get('/:id/drawings/:drawingId', authenticateToken, async (req, res) => {
  try {
    const { id, drawingId } = req.params;
    
    const result = await db.query(
      'SELECT file_name, file_data, file_type FROM order_drawings WHERE id = $1 AND order_id = $2',
      [drawingId, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ß–µ—Ä—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const drawing = result.rows[0];
    
    res.set({
      'Content-Type': drawing.file_type,
      'Content-Disposition': `attachment; filename="${drawing.file_name}"`,
      'Content-Length': drawing.file_data.length
    });
    
    res.send(drawing.file_data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// DELETE /api/orders/:id/drawings/:drawingId - —É–¥–∞–ª–∏—Ç—å —á–µ—Ä—Ç–µ–∂
router.delete('/:id/drawings/:drawingId', authenticateToken, async (req, res) => {
  try {
    const { id, drawingId } = req.params;
    
    const result = await db.query(
      'DELETE FROM order_drawings WHERE id = $1 AND order_id = $2 RETURNING file_name',
      [drawingId, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ß–µ—Ä—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ message: '–ß–µ—Ä—Ç–µ–∂ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;








// GET /api/orders/:id/drawings/:drawingId - –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä—Ç–µ–∂
router.get('/:id/drawings/:drawingId', authenticateToken, async (req, res) => {
  try {
    const { id, drawingId } = req.params;
    
    const result = await db.query(
      'SELECT file_name, file_data, file_type FROM order_drawings WHERE id = $1 AND order_id = $2',
      [drawingId, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ß–µ—Ä—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const drawing = result.rows[0];
    
    res.set({
      'Content-Type': drawing.file_type,
      'Content-Disposition': `attachment; filename="${drawing.file_name}"`,
      'Content-Length': drawing.file_data.length
    });
    
    res.send(drawing.file_data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// DELETE /api/orders/:id/drawings/:drawingId - —É–¥–∞–ª–∏—Ç—å —á–µ—Ä—Ç–µ–∂
router.delete('/:id/drawings/:drawingId', authenticateToken, async (req, res) => {
  try {
    const { id, drawingId } = req.params;
    
    const result = await db.query(
      'DELETE FROM order_drawings WHERE id = $1 AND order_id = $2 RETURNING file_name',
      [drawingId, id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ß–µ—Ä—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ message: '–ß–µ—Ä—Ç–µ–∂ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;

