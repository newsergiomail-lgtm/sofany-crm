const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...');

// –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const deletedFiles = [
  'OrderItemsTableSimple',
  'OrderTable',
  'OrderItemsTable',
  'OrderItemsTableV2',
  'SimpleOrderItemsTable',
  'OrderPositionsTable',
  'OrderPositionsTableSimple'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
const findFiles = (dir, extension = '.js') => {
  const files = [];
  const items = fs.readdirSync(dir);
  
  items.forEach(item => {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...findFiles(fullPath, extension));
    } else if (item.endsWith(extension)) {
      files.push(fullPath);
    }
  });
  
  return files;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
const checkFileImports = (filePath) => {
  const content = fs.readFileSync(filePath, 'utf8');
  const lines = content.split('\n');
  const issues = [];
  
  lines.forEach((line, index) => {
    deletedFiles.forEach(deletedFile => {
      // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const regex = new RegExp(`\\b${deletedFile}\\b`);
      if (regex.test(line) && (line.includes('import') || line.includes('require'))) {
        issues.push({
          file: path.relative(process.cwd(), filePath),
          line: index + 1,
          content: line.trim(),
          deletedFile
        });
      }
    });
  });
  
  return issues;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ JS —Ñ–∞–π–ª—ã
const srcPath = path.resolve(__dirname, 'src');
const jsFiles = findFiles(srcPath, '.js');

console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${jsFiles.length} JS —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

let totalIssues = 0;

jsFiles.forEach(filePath => {
  const issues = checkFileImports(filePath);
  
  if (issues.length > 0) {
    console.log(`\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ñ–∞–π–ª–µ: ${path.relative(process.cwd(), filePath)}`);
    issues.forEach(issue => {
      console.log(`  –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.content}`);
      console.log(`  –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${issue.deletedFile}`);
      totalIssues++;
    });
  }
});

if (totalIssues === 0) {
  console.log('\n‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ!');
} else {
  console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');

const newFiles = [
  'src/components/Orders/OrderPositionsTableNew.js',
  'src/components/Orders/OrderTableNew.js'
];

newFiles.forEach(file => {
  const filePath = path.resolve(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù!`);
  }
});

console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
