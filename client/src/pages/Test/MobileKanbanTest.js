import React, { useState, useEffect } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { 
  Phone, 
  Calendar, 
  User, 
  AlertCircle, 
  Clock, 
  CheckCircle,
  ChevronLeft,
  ChevronRight,
  Filter,
  Search
} from 'lucide-react';

const MobileKanbanTest = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentColumn, setCurrentColumn] = useState(0);
  const [showFilters, setShowFilters] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const mockOrders = [
    {
      id: 1,
      title: '–î–∏–≤–∞–Ω "–ö–æ–º—Ñ–æ—Ä—Ç"',
      customer: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.',
      priority: 'high',
      status: 'new',
      deadline: '2025-09-25',
      description: '–ú—è–≥–∫–∏–π –¥–∏–≤–∞–Ω —Å –ø–æ–¥—É—à–∫–∞–º–∏'
    },
    {
      id: 2,
      title: '–ö—Ä–µ—Å–ª–æ "–û—Ñ–∏—Å"',
      customer: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
      priority: 'medium',
      status: 'in_production',
      deadline: '2025-09-22',
      description: '–û—Ñ–∏—Å–Ω–æ–µ –∫—Ä–µ—Å–ª–æ —á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞'
    },
    {
      id: 3,
      title: '–°—Ç–æ–ª "–†–∞–±–æ—á–∏–π"',
      customer: '–°–∏–¥–æ—Ä–æ–≤ –°.–°.',
      priority: 'low',
      status: 'ready',
      deadline: '2025-09-20',
      description: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª'
    },
    {
      id: 4,
      title: '–®–∫–∞—Ñ "–ö–ª–∞—Å—Å–∏–∫"',
      customer: '–ö–æ–∑–ª–æ–≤ –ö.–ö.',
      priority: 'urgent',
      status: 'new',
      deadline: '2025-09-18',
      description: '–î–≤—É—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç—ã–π —à–∫–∞—Ñ'
    },
    {
      id: 5,
      title: '–ö—Ä–æ–≤–∞—Ç—å "–°–æ–Ω"',
      customer: '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.',
      priority: 'high',
      status: 'in_production',
      deadline: '2025-09-28',
      description: '–î–≤—É—Å–ø–∞–ª—å–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å —Å –º–∞—Ç—Ä–∞—Å–æ–º'
    }
  ];

  const columns = [
    { id: 'new', title: '–ù–æ–≤—ã–µ', color: 'bg-blue-100' },
    { id: 'in_production', title: '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ', color: 'bg-purple-100' },
    { id: 'ready', title: '–ì–æ—Ç–æ–≤—ã', color: 'bg-green-100' },
    { id: 'shipped', title: '–û—Ç–≥—Ä—É–∂–µ–Ω—ã', color: 'bg-orange-100' }
  ];

  const priorityColors = {
    low: 'bg-gray-100 text-gray-800',
    medium: 'bg-yellow-100 text-yellow-800',
    high: 'bg-orange-100 text-orange-800',
    urgent: 'bg-red-100 text-red-800'
  };

  const priorityIcons = {
    low: 'üü¢',
    medium: 'üü°',
    high: 'üü†',
    urgent: 'üî¥'
  };

  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      setOrders(mockOrders);
      setLoading(false);
    }, 1000);
  }, []);

  const handleDragEnd = (result) => {
    if (!result.destination) return;

    const { source, destination, draggableId } = result;
    
    if (source.droppableId === destination.droppableId) return;

    const newOrders = [...orders];
    const order = newOrders.find(o => o.id === parseInt(draggableId));
    
    if (order) {
      order.status = destination.droppableId;
      setOrders(newOrders);
    }
  };

  const getOrdersByStatus = (status) => {
    return orders.filter(order => order.status === status);
  };

  const filteredOrders = orders.filter(order => 
    order.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    order.customer.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getOrdersForColumn = (status) => {
    return filteredOrders.filter(order => order.status === status);
  };

  const nextColumn = () => {
    if (currentColumn < columns.length - 1) {
      setCurrentColumn(currentColumn + 1);
    }
  };

  const prevColumn = () => {
    if (currentColumn > 0) {
      setCurrentColumn(currentColumn - 1);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ö–∞–Ω–±–∞–Ω–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ú–æ–±–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-10">
        <div className="px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Phone className="h-5 w-5 text-blue-600" />
              <h1 className="text-lg font-semibold text-gray-900">–ö–∞–Ω–±–∞–Ω (–ú–æ–±–∏–ª—å–Ω—ã–π)</h1>
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200"
              >
                <Filter className="h-4 w-4" />
              </button>
            </div>
          </div>
          
          {/* –ü–æ–∏—Å–∫ */}
          <div className="mt-3">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
        </div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º */}
      <div className="bg-white border-b border-gray-200 px-4 py-2">
        <div className="flex items-center justify-between">
          <button
            onClick={prevColumn}
            disabled={currentColumn === 0}
            className="p-2 rounded-lg bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="h-4 w-4" />
          </button>
          
          <div className="flex-1 text-center">
            <h2 className="text-lg font-medium text-gray-900">
              {columns[currentColumn].title}
            </h2>
            <p className="text-sm text-gray-500">
              {getOrdersForColumn(columns[currentColumn].id).length} –∑–∞–∫–∞–∑–æ–≤
            </p>
          </div>
          
          <button
            onClick={nextColumn}
            disabled={currentColumn === columns.length - 1}
            className="p-2 rounded-lg bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronRight className="h-4 w-4" />
          </button>
        </div>
      </div>

      {/* –ö–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∞ */}
      <div className="p-4">
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId={columns[currentColumn].id}>
            {(provided, snapshot) => (
              <div
                ref={provided.innerRef}
                {...provided.droppableProps}
                className={`min-h-96 p-4 rounded-lg border-2 border-dashed ${
                  snapshot.isDraggingOver 
                    ? 'border-blue-400 bg-blue-50' 
                    : 'border-gray-200 bg-white'
                }`}
              >
                <div className="space-y-3">
                  {getOrdersForColumn(columns[currentColumn].id).map((order, index) => (
                    <Draggable key={order.id} draggableId={order.id.toString()} index={index}>
                      {(provided, snapshot) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          className={`bg-white rounded-lg shadow-sm border border-gray-200 p-4 ${
                            snapshot.isDragging ? 'shadow-lg transform rotate-2' : ''
                          }`}
                        >
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                          <div className="flex items-start justify-between mb-2">
                            <h3 className="font-medium text-gray-900 text-sm leading-tight">
                              {order.title}
                            </h3>
                            <span className="text-lg">
                              {priorityIcons[order.priority]}
                            </span>
                          </div>

                          {/* –ö–ª–∏–µ–Ω—Ç */}
                          <div className="flex items-center space-x-2 mb-2">
                            <User className="h-3 w-3 text-gray-400" />
                            <span className="text-xs text-gray-600">{order.customer}</span>
                          </div>

                          {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
                          <div className="mb-2">
                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${priorityColors[order.priority]}`}>
                              {order.priority === 'low' && '–ù–∏–∑–∫–∏–π'}
                              {order.priority === 'medium' && '–°—Ä–µ–¥–Ω–∏–π'}
                              {order.priority === 'high' && '–í—ã—Å–æ–∫–∏–π'}
                              {order.priority === 'urgent' && '–°—Ä–æ—á–Ω—ã–π'}
                            </span>
                          </div>

                          {/* –°—Ä–æ–∫ */}
                          <div className="flex items-center space-x-2 mb-2">
                            <Calendar className="h-3 w-3 text-gray-400" />
                            <span className="text-xs text-gray-600">{order.deadline}</span>
                          </div>

                          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                          <p className="text-xs text-gray-500 line-clamp-2">
                            {order.description}
                          </p>

                          {/* –î–µ–π—Å—Ç–≤–∏—è */}
                          <div className="mt-3 flex space-x-2">
                            <button className="flex-1 bg-blue-50 text-blue-700 text-xs py-1 px-2 rounded hover:bg-blue-100">
                              –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                            <button className="flex-1 bg-green-50 text-green-700 text-xs py-1 px-2 rounded hover:bg-green-100">
                              –ò–∑–º–µ–Ω–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ */}
      <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2">
        <div className="flex space-x-2 bg-white rounded-full shadow-lg px-4 py-2">
          {columns.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentColumn(index)}
              className={`w-2 h-2 rounded-full ${
                index === currentColumn ? 'bg-blue-600' : 'bg-gray-300'
              }`}
            />
          ))}
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã) */}
      {showFilters && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-end">
          <div className="bg-white rounded-t-lg w-full max-h-96 p-4">
            <h3 className="text-lg font-semibold mb-4">–§–∏–ª—å—Ç—Ä—ã</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                </label>
                <div className="flex space-x-2">
                  {Object.keys(priorityColors).map(priority => (
                    <button
                      key={priority}
                      className={`px-3 py-1 rounded-full text-xs ${priorityColors[priority]}`}
                    >
                      {priority === 'low' && '–ù–∏–∑–∫–∏–π'}
                      {priority === 'medium' && '–°—Ä–µ–¥–Ω–∏–π'}
                      {priority === 'high' && '–í—ã—Å–æ–∫–∏–π'}
                      {priority === 'urgent' && '–°—Ä–æ—á–Ω—ã–π'}
                    </button>
                  ))}
                </div>
              </div>
            </div>
            <button
              onClick={() => setShowFilters(false)}
              className="w-full mt-4 bg-blue-600 text-white py-2 rounded-lg"
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default MobileKanbanTest;
