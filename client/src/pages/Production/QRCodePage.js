import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  QrCode, 
  Download, 
  RefreshCw, 
  AlertCircle, 
  Shield, 
  Printer, 
  Copy, 
  Lightbulb, 
  FileText, 
  Factory, 
  BarChart3,
  ArrowLeft
} from 'lucide-react';
import { productionAPI } from '../../services/productionAPI';
import toast from 'react-hot-toast';

const QRCodePage = () => {
  const { orderId } = useParams();
  const navigate = useNavigate();
  
  const [stages, setStages] = useState([]);
  const [selectedStageId, setSelectedStageId] = useState(null);
  const [qrCode, setQrCode] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [orderNumber, setOrderNumber] = useState('');

  console.log('üé≠ QRCodePage render:', { 
    orderId, 
    orderIdType: typeof orderId,
    selectedStageId, 
    qrCode: !!qrCode,
    qrCodeId: qrCode?.id,
    isGenerating, 
    isLoading, 
    error,
    stagesCount: stages.length,
    timestamp: new Date().toISOString()
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  useEffect(() => {
    loadStages();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–µ –ë—é—Ä–æ)
  useEffect(() => {
    if (Array.isArray(stages) && stages.length > 0 && !selectedStageId) {
      const firstStage = stages.find(stage => stage.order_index === 1) || stages[0];
      if (firstStage && firstStage.id) {
        setSelectedStageId(firstStage.id);
      }
    }
  }, [stages, selectedStageId]);

  const loadStages = async () => {
    try {
      setIsLoading(true);
      const response = await productionAPI.getStages();
      console.log('–û—Ç–≤–µ—Ç API —ç—Ç–∞–ø–æ–≤:', response);
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {success: true, stages: [...]}
      const stagesData = response.data?.stages || response.data || [];
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:', stagesData);
      setStages(stagesData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.');
      setStages([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateQR = useCallback(async () => {
    if (!selectedStageId) {
      console.error('‚ùå –≠—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω');
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      return;
    }

    if (!orderId) {
      console.error('‚ùå ID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      toast.error('ID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞:', { orderId, selectedStageId });

    try {
      setIsGenerating(true);
      setError(null);

      const response = await productionAPI.generateQR(orderId, selectedStageId);
      console.log('üì° –û—Ç–≤–µ—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR:', response);
      
      if (response.data.success) {
        console.log('‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', response.data.qr_code);
        setQrCode(response.data.qr_code);
        setOrderNumber(response.data.qr_code?.order_number || response.data.order_number || '–ù–µ —É–∫–∞–∑–∞–Ω');
        toast.success('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', response.data);
        throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
      const errorMessage = error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞';
      setError(errorMessage);
      toast.error(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    } finally {
      setIsGenerating(false);
    }
  }, [selectedStageId, orderId]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    console.log('üîÑ useEffect –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR:', { selectedStageId, orderId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ orderId —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    const numericOrderId = parseInt(orderId);
    if (selectedStageId && orderId && !isNaN(numericOrderId)) {
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞...');
      handleGenerateQR();
    } else {
      console.log('‚è≥ –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π orderId:', { selectedStageId, orderId, numericOrderId });
    }
  }, [selectedStageId, orderId, handleGenerateQR]);

  const handleDownloadQR = async () => {
    if (!qrCode?.qr_image) {
      toast.error('–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      return;
    }

    try {
      const link = document.createElement('a');
      link.href = `data:image/png;base64,${qrCode.qr_image}`;
      link.download = `QR-–∫–æ–¥_–∑–∞–∫–∞–∑_${orderNumber || orderId}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      toast.success('QR-–∫–æ–¥ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞');
    }
  };

  const handlePrintQR = () => {
    if (!qrCode?.qr_image) {
      toast.error('–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏');
      return;
    }

    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞ ${orderNumber || orderId}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              text-align: center; 
              padding: 20px;
            }
            .qr-container { 
              margin: 20px 0; 
            }
            .qr-image { 
              max-width: 300px; 
              height: auto; 
            }
            .order-info { 
              margin: 20px 0; 
              font-size: 16px; 
            }
            @media print {
              body { margin: 0; }
            }
          </style>
        </head>
        <body>
          <h2>QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞</h2>
          <div class="order-info">
            <p><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> ${orderNumber || orderId}</p>
            <p><strong>–≠—Ç–∞–ø:</strong> ${stages.find(s => s.id === selectedStageId)?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω'}</p>
          </div>
          <div class="qr-container">
            <img src="data:image/png;base64,${qrCode.qr_image}" alt="QR-–∫–æ–¥" class="qr-image" />
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const handleCopyQR = async () => {
    if (!qrCode?.qr_image) {
      toast.error('–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    try {
      const response = await fetch(`data:image/png;base64,${qrCode.qr_image}`);
      const blob = await response.blob();
      await navigator.clipboard.write([
        new ClipboardItem({ 'image/png': blob })
      ]);
      toast.success('QR-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞');
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-teal-600" />
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => navigate('/orders/create')}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <ArrowLeft className="h-5 w-5 text-gray-600" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
                  <QrCode className="h-8 w-8 text-teal-600" />
                  QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞
                </h1>
                <p className="text-gray-600 mt-1">
                  –ó–∞–∫–∞–∑ #{orderId} ‚Ä¢ {orderNumber || '–ù–æ–º–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - QR-–∫–æ–¥ */}
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-6 flex items-center gap-2">
              <QrCode className="h-6 w-6 text-teal-600" />
              QR-–∫–æ–¥
            </h2>

            {error ? (
              <div className="text-center py-8">
                <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
                <p className="text-red-600 mb-4">{error}</p>
                <button
                  onClick={handleGenerateQR}
                  disabled={isGenerating}
                  className="bg-teal-600 text-white px-4 py-2 rounded-lg hover:bg-teal-700 disabled:bg-gray-300 transition-colors"
                >
                  {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
                </button>
              </div>
            ) : qrCode ? (
              <div className="text-center">
                <div className="bg-white p-4 rounded-lg border-2 border-gray-200 inline-block mb-6">
                  {qrCode.qr_image ? (
                    <img
                      src={`data:image/png;base64,${qrCode.qr_image}`}
                      alt="QR-–∫–æ–¥"
                      className="w-48 h-48 mx-auto"
                    />
                  ) : (
                    <div className="w-48 h-48 bg-gray-100 flex items-center justify-center">
                      <p className="text-gray-500">QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
                    </div>
                  )}
                </div>
                
                <div className="space-y-3">
                  <button
                    onClick={handleDownloadQR}
                    className="w-full bg-teal-600 text-white px-4 py-3 rounded-lg hover:bg-teal-700 transition-colors flex items-center justify-center gap-2"
                  >
                    <Download className="h-5 w-5" />
                    –°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥
                  </button>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={handlePrintQR}
                      className="bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
                    >
                      <Printer className="h-5 w-5" />
                      –ü–µ—á–∞—Ç—å
                    </button>
                    
                    <button
                      onClick={handleCopyQR}
                      className="bg-gray-600 text-white px-4 py-3 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center gap-2"
                    >
                      <Copy className="h-5 w-5" />
                      –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <RefreshCw className="h-12 w-12 text-gray-400 mx-auto mb-4 animate-spin" />
                <p className="text-gray-600">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞...</p>
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <FileText className="h-5 w-5 text-teal-600" />
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-600">ID –∑–∞–∫–∞–∑–∞:</span>
                  <span className="font-medium">#{orderId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                  <span className="font-medium">{orderNumber || '–ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:</span>
                  <span className="font-medium">
                    {Array.isArray(stages) ? stages.find(s => s.id === selectedStageId)?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω' : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                  </span>
                </div>
              </div>
            </div>

            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
            <div className="bg-blue-50 rounded-xl border border-blue-200 p-6">
              <h3 className="text-lg font-semibold text-blue-900 mb-4 flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-blue-600" />
                –ß—Ç–æ –¥–∞–ª—å—à–µ?
              </h3>
              
              <div className="space-y-3 text-blue-800">
                <div className="flex items-start gap-3">
                  <Shield className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <p className="text-sm">
                    QR-–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                  </p>
                </div>
                
                <div className="flex items-start gap-3">
                  <Factory className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <p className="text-sm">
                    –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞ —ç—Ç–∞–ø "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–µ –ë—é—Ä–æ"
                  </p>
                </div>
                
                <div className="flex items-start gap-3">
                  <BarChart3 className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                  <p className="text-sm">
                    –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–∫–∞–∑—ã" –∏–ª–∏ "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
                  </p>
                </div>
              </div>
            </div>

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                –î–µ–π—Å—Ç–≤–∏—è
              </h3>
              
              <div className="space-y-3">
                <button
                  onClick={() => navigate('/orders')}
                  className="w-full bg-gray-600 text-white px-4 py-3 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º
                </button>
                
                <button
                  onClick={() => navigate('/orders/create')}
                  className="w-full bg-teal-600 text-white px-4 py-3 rounded-lg hover:bg-teal-700 transition-colors"
                >
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QRCodePage;
