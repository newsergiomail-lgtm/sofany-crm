import React, { useState, useEffect } from 'react';
import { QrCode, Download, RefreshCw, AlertCircle, CheckCircle } from 'lucide-react';
import { productionAPI, qrUtils } from '../../services/productionAPI';
import toast from 'react-hot-toast';

const QRCodeGenerator = ({ orderId, orderNumber, currentStage, onQRGenerated }) => {
  const [stages, setStages] = useState([]);
  const [selectedStageId, setSelectedStageId] = useState(null);
  const [qrCode, setQrCode] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showStageSelector, setShowStageSelector] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  useEffect(() => {
    loadStages();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–µ –ë—é—Ä–æ)
  useEffect(() => {
    if (stages.length > 0 && !selectedStageId) {
      // –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ø "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–µ –ë—é—Ä–æ" (–ø–µ—Ä–≤—ã–π –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
      const firstStage = stages.find(stage => stage.order_index === 1) || stages[0];
      setSelectedStageId(firstStage.id);
    }
  }, [stages, selectedStageId]);

  const loadStages = async () => {
    try {
      setIsLoading(true);
      const response = await productionAPI.getStages();
      setStages(response.data.stages);
      setError(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateQR = async () => {
    if (!selectedStageId) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      return;
    }

    if (!orderId || orderId === '–ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏') {
      toast.error('–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥');
      return;
    }

    try {
      setIsGenerating(true);
      setError(null);

      const response = await productionAPI.generateQR(orderId, selectedStageId);
      
      if (response.data.success) {
        setQrCode(response.data.qr_code);
        toast.success('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (onQRGenerated) {
          onQRGenerated(response.data.qr_code);
        }
      } else {
        throw new Error(response.data.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
      const errorMessage = error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadQR = async () => {
    if (!qrCode?.qr_image) {
      toast.error('–ù–µ—Ç QR-–∫–æ–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      link.href = qrCode.qr_image;
      link.download = `QR_${orderNumber}_${qrCode.stage_name.replace(/\s+/g, '_')}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast.success('QR-–∫–æ–¥ —Å–∫–∞—á–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞');
    }
  };

  const handleRefresh = () => {
    setQrCode(null);
    setError(null);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-6">
        <RefreshCw className="h-6 w-6 animate-spin text-teal-600" />
        <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ø–æ–≤...</span>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-teal-100 rounded-lg flex items-center justify-center">
            <QrCode className="h-4 w-4 text-teal-600" />
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">QR-–∫–æ–¥ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</h3>
            <p className="text-xs text-gray-500">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</p>
          </div>
        </div>
        {qrCode && (
          <div className="flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">
            <CheckCircle className="h-3 w-3" />
            –ì–æ—Ç–æ–≤
          </div>
        )}
      </div>

      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
          <AlertCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
          <p className="text-sm text-red-700">{error}</p>
        </div>
      )}

      {/* –í—ã–±–æ—Ä —ç—Ç–∞–ø–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π */}
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-gray-700">
            –≠—Ç–∞–ø –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
          </label>
          <button
            type="button"
            onClick={() => setShowStageSelector(!showStageSelector)}
            className="text-xs text-teal-600 hover:text-teal-700 font-medium"
          >
            {showStageSelector ? '–°–∫—Ä—ã—Ç—å' : '–ò–∑–º–µ–Ω–∏—Ç—å'}
          </button>
        </div>
        
        {showStageSelector ? (
          <select
            value={selectedStageId || ''}
            onChange={(e) => setSelectedStageId(parseInt(e.target.value))}
            className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:border-teal-500 focus:ring-1 focus:ring-teal-200"
            disabled={isGenerating}
          >
            {stages.map((stage) => (
              <option key={stage.id} value={stage.id}>
                {stage.name}
                {stage.can_work_parallel && ' (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)'}
              </option>
            ))}
          </select>
        ) : (
          <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-lg text-sm text-gray-700">
            {stages.find(s => s.id === selectedStageId)?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è */}
      <div className="p-3 bg-gray-50 rounded-lg">
        <div className="grid grid-cols-2 gap-3 text-xs">
          <div>
            <span className="text-gray-500">–ó–∞–∫–∞–∑:</span>
            <span className="ml-1 font-medium text-gray-900">#{orderNumber}</span>
          </div>
          <div>
            <span className="text-gray-500">ID:</span>
            <span className="ml-1 font-medium text-gray-900">{orderId}</span>
          </div>
        </div>
        {(!orderId || orderId === '–ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏') && (
          <div className="mt-2 p-2 bg-amber-50 border border-amber-200 rounded text-xs text-amber-700">
            üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
      <button
        onClick={handleGenerateQR}
        disabled={!selectedStageId || isGenerating || !orderId || orderId === '–ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}
        className="w-full bg-teal-600 text-white px-4 py-2.5 rounded-lg hover:bg-teal-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center justify-center gap-2 text-sm font-medium"
      >
        {isGenerating ? (
          <RefreshCw className="h-4 w-4 animate-spin" />
        ) : (
          <QrCode className="h-4 w-4" />
        )}
        {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 
         (!orderId || orderId === '–ë—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏') ? '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–∫–∞–∑' : 
         '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'}
      </button>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ */}
      {qrCode && (
        <div className="space-y-4">
          {/* –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ */}
          <div className="flex items-center gap-2 p-3 bg-green-50 border border-green-200 rounded-lg">
            <CheckCircle className="h-4 w-4 text-green-600 flex-shrink-0" />
            <div className="flex-1">
              <p className="text-sm font-medium text-green-800">QR-–∫–æ–¥ –≥–æ—Ç–æ–≤</p>
              <p className="text-xs text-green-700">
                –≠—Ç–∞–ø: {qrCode.stage_name} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π
              </p>
            </div>
          </div>

          {/* QR-–∫–æ–¥ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="space-y-3">
            {/* QR-–∫–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <div className="flex justify-center">
              <div className="relative">
                <img
                  src={qrCode.qr_image}
                  alt="QR Code"
                  className="w-32 h-32 border border-gray-200 rounded-lg"
                />
                <div className="absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                  <CheckCircle className="h-3 w-3 text-white" />
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex gap-2">
              <button
                onClick={handleDownloadQR}
                className="flex-1 bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-1 text-sm"
              >
                <Download className="h-3 w-3" />
                –°–∫–∞—á–∞—Ç—å
              </button>
              <button
                onClick={handleRefresh}
                className="px-3 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-center gap-1 text-sm"
              >
                <RefreshCw className="h-3 w-3" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QR-–∫–æ–¥–µ */}
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="space-y-2 text-xs">
                <div className="flex justify-between">
                  <span className="text-blue-700">ID QR-–∫–æ–¥–∞:</span>
                  <span className="font-mono text-blue-900">#{qrCode.id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-blue-700">–°–æ–∑–¥–∞–Ω:</span>
                  <span className="text-blue-900">{new Date().toLocaleString('ru-RU')}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-blue-700">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
                  <span className="text-blue-900">{new Date(qrCode.expires_at).toLocaleString('ru-RU')}</span>
                </div>
              </div>
            </div>

            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
            <div className="p-3 bg-amber-50 border border-amber-200 rounded-lg">
              <p className="text-xs text-amber-800">
                <strong>üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong> –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ QR-–∫–æ–¥ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥—É. 
                –ú–∞—Å—Ç–µ—Ä–∞ —Å–º–æ–≥—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default QRCodeGenerator;