const fs = require('fs');
const path = require('path');

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ webpack –∫—ç—à–∞...');

// 1. –£–¥–∞–ª—è–µ–º webpack –∫—ç—à
const webpackCachePath = path.resolve(__dirname, 'node_modules/.cache');
if (fs.existsSync(webpackCachePath)) {
  fs.rmSync(webpackCachePath, { recursive: true, force: true });
  console.log('‚úÖ Webpack cache —É–¥–∞–ª–µ–Ω');
} else {
  console.log('‚ÑπÔ∏è  Webpack cache –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 2. –£–¥–∞–ª—è–µ–º build –ø–∞–ø–∫—É
const buildPath = path.resolve(__dirname, 'build');
if (fs.existsSync(buildPath)) {
  fs.rmSync(buildPath, { recursive: true, force: true });
  console.log('‚úÖ Build –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
} else {
  console.log('‚ÑπÔ∏è  Build –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// 3. –£–¥–∞–ª—è–µ–º ESLint –∫—ç—à
const eslintCachePath = path.resolve(__dirname, '.eslintcache');
if (fs.existsSync(eslintCachePath)) {
  fs.unlinkSync(eslintCachePath);
  console.log('‚úÖ ESLint cache —É–¥–∞–ª–µ–Ω');
} else {
  console.log('‚ÑπÔ∏è  ESLint cache –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 4. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const tempFiles = [
  '.DS_Store',
  'Thumbs.db',
  '*.tmp',
  '*.temp',
  '*.log',
  'client.log'
];

tempFiles.forEach(pattern => {
  try {
    const files = require('glob').sync(pattern, { cwd: __dirname });
    files.forEach(file => {
      try {
        fs.unlinkSync(path.resolve(__dirname, file));
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω: ${file}`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    });
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
});

console.log('üéâ –ö—ç—à –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: npm start');




