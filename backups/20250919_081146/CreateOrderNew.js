import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useMutation } from 'react-query';
import { 
  ArrowLeft, 
  Save,
  User,
  DollarSign,
  FileText,
  Clock,
  CheckCircle,
  Package,
  Shield
} from 'lucide-react';
import { ordersAPI, customersAPI, purchaseAPI } from '../../services/api';
import LoadingSpinner from '../../components/UI/LoadingSpinner';
import SimpleQRCodeGenerator from '../../components/Production/SimpleQRCodeGenerator';
import OrderItemsTableSimple from '../../components/Orders/OrderItemsTableSimple';
import WarehouseInventoryTable from '../../components/Orders/WarehouseInventoryTable';
import toast from 'react-hot-toast';

const CreateOrderNew = () => {
  const navigate = useNavigate();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
  const [clientForm, setClientForm] = useState({
    name: '',
    phone: '',
    email: '',
    address: '',
    floor: '',
    comment: '',
    hasFreightElevator: false,
    company: '',
    // –î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ —à—Ç–æ—Ä–∫–æ–π)
    additionalContact: '',
    preferredChannel: '',
    deliveryTimeWindow: '',
    deliveryMethod: '',
    deliveryCost: ''
  });

  const [financialForm, setFinancialForm] = useState({
    totalAmount: 0,
    prepaymentDate: '',
    prepaymentAmount: 0,
    prepaymentPercent: 0,
    isCashPayment: false,
    // –î–æ–ø. —Ñ–∏–Ω–ø–æ–ª—è
    paymentMethod: '',
    invoiceNumber: '',
    finalPaymentDate: '',
    finalPaymentAmount: 0,
    paidAmount: 0
  });

  const [projectForm, setProjectForm] = useState({
    name: '',
    description: '',
    deadline: '',
    priority: 'normal',
    status: 'new'
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–Ω–æ–º–µ—Ä, ID, —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
  const [orderForm, setOrderForm] = useState({
    id: null,
    orderNumber: '',
    status: 'new',
    priority: 'normal'
  });

  const [isOrderSaved, setIsOrderSaved] = useState(false);
  const [isAuthorized, setIsAuthorized] = useState(false);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    const autoLogin = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          console.log('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
          const response = await fetch('http://localhost:5000/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: 'admin@sofany.com', password: 'admin123' })
          });
          
          if (response.ok) {
            const data = await response.json();
            localStorage.setItem('token', data.token);
            console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            setIsAuthorized(true);
          } else {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          }
        } else {
          console.log('–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω');
          setIsAuthorized(true);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }
    };

    autoLogin();
  }, []);

  // –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
  const [orderItems, setOrderItems] = useState([]);

  // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∫–ª–∞–¥–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏
  const [warehouseItems, setWarehouseItems] = useState([]);

  // –§–∞–π–ª—ã (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞)
  const [selectedFiles, setSelectedFiles] = useState([]); // Array<File>
  const [uploading, setUploading] = useState(false);

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const createOrderMutation = useMutation(ordersAPI.create, {
    onSuccess: () => {
      // –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ handleSave —á–µ—Ä–µ–∑ mutateAsync
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º
  const handleClientFormChange = (field, value) => {
    setClientForm(prev => ({ ...prev, [field]: value }));
  };

  const handleFinancialFormChange = (field, value) => {
    setFinancialForm(prev => ({ ...prev, [field]: value }));
  };

  const handleProjectFormChange = (field, value) => {
    setProjectForm(prev => ({ ...prev, [field]: value }));
  };

  const handleStatusChange = (status) => {
    setOrderForm(prev => ({ ...prev, status }));
  };

  const handlePriorityChange = (priority) => {
    setOrderForm(prev => ({ ...prev, priority }));
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormReady = () => {
    return clientForm.name.trim() && 
           clientForm.phone.trim() && 
           projectForm.name.trim() && 
           projectForm.description.trim() && 
           financialForm.totalAmount && 
           financialForm.totalAmount > 0;
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  const validateForm = () => {
    const errors = [];
    
    if (!clientForm.name.trim()) {
      errors.push('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    
    if (!clientForm.phone.trim()) {
      errors.push('–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    if (!projectForm.name.trim()) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    
    if (!projectForm.description.trim()) {
      errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    
    if (!financialForm.totalAmount || financialForm.totalAmount <= 0) {
      errors.push('–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
    
    return errors;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleSave = async () => {
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
      const validationErrors = validateForm();
      if (validationErrors.length > 0) {
        validationErrors.forEach(error => toast.error(error));
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
      let customerId = null;
      
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if (clientForm.email || clientForm.phone) {
          const existingCustomer = await customersAPI.findByEmailOrPhone({
            email: clientForm.email,
            phone: clientForm.phone
          });
        if (existingCustomer) {
          customerId = existingCustomer.id;
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç, ID:', customerId);
          }
        }
        
        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if (!customerId) {
          const newCustomer = await customersAPI.create({
            name: clientForm.name,
            phone: clientForm.phone,
            address: clientForm.address || '',
            email: clientForm.email || `client_${Date.now()}@temp.com` // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
          });
          customerId = newCustomer.id;
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç, ID:', customerId);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º:', error);
        toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ');
        // –§–æ–ª–±—ç–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customerId = 1; // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
      }

      // –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é)
      const items = orderItems.length > 0 ? orderItems.map(item => ({
        name: item.name || '–¢–æ–≤–∞—Ä',
        description: item.description || '',
        quantity: parseFloat(item.quantity) || 1,
        unit_price: parseFloat(item.unit_price) || 0
      })) : [{
        name: orderForm.productName || projectForm.name || '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä',
        description: projectForm.description || '',
        quantity: 1,
        unit_price: parseFloat(financialForm.totalAmount) || 0
      }];

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
      const totalAmount = items.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);

      const apiBody = {
        customer_id: customerId,
        product_name: orderForm.productName || projectForm.name || items[0]?.name || '',
        status: orderForm.status || 'new',
        priority: orderForm.priority === 'medium' ? 'normal' : (orderForm.priority || 'normal'),
        delivery_date: orderForm.deadline || null,
        total_amount: totalAmount,
        items: items,
        prepayment_amount: financialForm.prepaymentAmount || 0,
        paid_amount: financialForm.paidAmount || 0,
        notes: clientForm.comment || '',
        short_description: projectForm.description || '',
        detailed_description: projectForm.description || '',
        // –ø–ª–æ—Å–∫–∏–µ –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞/–¥–æ—Å—Ç–∞–≤–∫–∏
        additional_contact: clientForm.additionalContact || null,
        preferred_contact: clientForm.preferredChannel || null,
        delivery_address: clientForm.address || null,
        has_elevator: !!clientForm.hasFreightElevator,
        floor: clientForm.floor || null,
        delivery_notes: clientForm.comment || null,
        project_description: projectForm.description || null
      };

      // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const data = await createOrderMutation.mutateAsync(apiBody);
      const newId = data?.order?.id || data?.id;
      const newOrderNumber = data?.order?.order_number || data?.order_number;
      if (!newId) {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º orderForm —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
      setOrderForm(prev => ({
        ...prev,
        id: newId,
        orderNumber: newOrderNumber || prev.orderNumber
      }));

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
      setIsOrderSaved(true);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      if (selectedFiles.length > 0) {
        setUploading(true);
        try {
          for (const file of selectedFiles) {
            const formData = new FormData();
            formData.append('drawing', file);
            await ordersAPI.uploadDrawing(newId, formData);
          }
          toast.success('–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', e);
          toast.error('–ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å');
        } finally {
          setUploading(false);
          setSelectedFiles([]);
        }
      }

      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
    } catch (e) {
      const msg = e?.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞';
      toast.error(msg);
    }
  };

  if (createOrderMutation.isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (!isAuthorized) {
  return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="h-8 w-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
            </div>
          </div>
    );
  }

  // –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
  const orderStatuses = [
    { id: 'new', label: '–ù–æ–≤—ã–π', icon: Package, color: 'blue' },
    { id: 'confirmed', label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', icon: CheckCircle, color: 'green' },
    { id: 'in_production', label: '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ', icon: Clock, color: 'yellow' },
    { id: 'ready', label: '–ì–æ—Ç–æ–≤', icon: Shield, color: 'purple' }
  ];

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-4">
              <button
              onClick={() => navigate('/orders')}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
              <ArrowLeft className="h-6 w-6 text-gray-600" />
              </button>
            <h1 className="text-3xl font-bold text-gray-900">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
          </div>
          <p className="text-gray-600">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –∫–ª–∏–µ–Ω—Ç–µ –∏ –ø—Ä–æ–µ–∫—Ç–µ</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ä–º—ã (–∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ ~62%) */}
          <div className="lg:col-span-3 space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex items-center gap-3 mb-6">
                <User className="h-6 w-6 text-blue-600" />
                <h2 className="text-xl font-semibold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ò–º—è <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      !clientForm.name.trim() ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    value={clientForm.name}
                    onChange={(e) => handleClientFormChange('name', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–µ–ª–µ—Ñ–æ–Ω <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="tel"
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                      !clientForm.phone.trim() ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    value={clientForm.phone}
                    onChange={(e) => handleClientFormChange('phone', e.target.value)}
                    placeholder="+7 (999) 123-45-67"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input
                    type="email"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={clientForm.email}
                    onChange={(e) => handleClientFormChange('email', e.target.value)}
                    placeholder="client@example.com"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–ö–æ–º–ø–∞–Ω–∏—è</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={clientForm.company}
                    onChange={(e) => handleClientFormChange('company', e.target.value)}
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                  />
                </div>
                
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={clientForm.address}
                    onChange={(e) => handleClientFormChange('address', e.target.value)}
                    placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–≠—Ç–∞–∂</label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    value={clientForm.floor}
                    onChange={(e) => handleClientFormChange('floor', e.target.value)}
                    placeholder="–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞"
                  />
                </div>
                
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="hasFreightElevator"
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    checked={clientForm.hasFreightElevator}
                    onChange={(e) => handleClientFormChange('hasFreightElevator', e.target.checked)}
                  />
                  <label htmlFor="hasFreightElevator" className="ml-2 block text-sm text-gray-700">
                    –ï—Å—Ç—å –≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç
                </label>
              </div>
                
                <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                <textarea
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows={3}
                  value={clientForm.comment}
                    onChange={(e) => handleClientFormChange('comment', e.target.value)}
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ"
                />
              </div>
                </div>
              </div>

            {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex items-center gap-3 mb-6">
                <DollarSign className="h-6 w-6 text-green-600" />
                <h2 className="text-xl font-semibold text-gray-900">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û–±—â–∞—è —Å—É–º–º–∞ <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 ${
                      !financialForm.totalAmount || financialForm.totalAmount <= 0 ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    value={financialForm.totalAmount}
                    onChange={(e) => handleFinancialFormChange('totalAmount', parseFloat(e.target.value) || 0)}
                    placeholder="0"
                    min="0"
                    step="0.01"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞</label>
                  <input
                    type="number"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={financialForm.prepaymentAmount}
                    onChange={(e) => handleFinancialFormChange('prepaymentAmount', parseFloat(e.target.value) || 0)}
                    placeholder="0"
                  min="0"
                    step="0.01"
                />
              </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–î–∞—Ç–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</label>
                    <input
                    type="date"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={financialForm.prepaymentDate}
                    onChange={(e) => handleFinancialFormChange('prepaymentDate', e.target.value)}
                  />
              </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
                  <select
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={financialForm.paymentMethod}
                    onChange={(e) => handleFinancialFormChange('paymentMethod', e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±</option>
                    <option value="cash">–ù–∞–ª–∏—á–Ω—ã–µ</option>
                    <option value="card">–ö–∞—Ä—Ç–∞</option>
                    <option value="transfer">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</option>
                    <option value="installment">–†–∞—Å—Å—Ä–æ—á–∫–∞</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (–¥–µ–¥–ª–∞–π–Ω)</label>
                  <input
                    type="date"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={financialForm.finalPaymentDate}
                    onChange={(e) => handleFinancialFormChange('finalPaymentDate', e.target.value)}
                  />
            </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</label>
                  <input
                    type="number"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    value={financialForm.finalPaymentAmount}
                    onChange={(e) => handleFinancialFormChange('finalPaymentAmount', parseFloat(e.target.value) || 0)}
                    placeholder="0"
                    min="0"
                    step="0.01"
                  />
                </div>
                </div>
                </div>

                  </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - QR –∫–æ–¥ –∏ —Å—Ç–∞—Ç—É—Å (–∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ ~38%) */}
          <div className="lg:col-span-2 space-y-6">
            {/* QR –∫–æ–¥ */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex items-center gap-3 mb-6">
                <Package className="h-6 w-6 text-teal-600" />
                <h2 className="text-xl font-semibold text-gray-900">QR –∫–æ–¥ –∑–∞–∫–∞–∑–∞</h2>
                  </div>

              <div className="text-center">
              {isOrderSaved && orderForm.id ? (
                <div className="text-center">
                  <div className="bg-white p-6 rounded-lg border border-gray-200">
                    <SimpleQRCodeGenerator 
                      orderId={orderForm.id} 
                      orderNumber={orderForm.orderNumber}
                    />
                  </div>
                </div>
              ) : (
                <div className="py-8 text-gray-500">
                  <Package className="h-8 w-8 mx-auto mb-2 text-gray-400" />
                  <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–∫–∞–∑</p>
                </div>
              )}
              </div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex items-center gap-3 mb-6">
                <Clock className="h-6 w-6 text-teal-600" />
                <h2 className="text-xl font-semibold text-gray-900">–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</h2>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</label>
                <div className="relative">
                  <input
                    type="text"
                    className="w-full px-3 py-2 pr-24 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 bg-gray-50"
                    value={orderForm.orderNumber}
                    readOnly
                  />
                </div>
              </div>
              
              <div className="space-y-3">
                {orderStatuses.map((status) => {
                  const IconComponent = status.icon;
                  const isActive = orderForm.status === status.id;
                  
                  return (
                    <div
                      key={status.id}
                      onClick={() => handleStatusChange(status.id)}
                      className={`flex items-center gap-3 p-3 rounded-lg cursor-pointer transition-all ${
                        isActive
                          ? `bg-${status.color}-50 border border-${status.color}-200`
                          : 'bg-gray-50 border border-gray-200 hover:bg-gray-100'
                      }`}
                    >
                      <IconComponent className={`h-5 w-5 ${
                        isActive ? `text-${status.color}-600` : 'text-gray-400'
                      }`} />
                      <span className={`text-sm font-medium ${
                          isActive ? `text-${status.color}-900` : 'text-gray-700'
                        }`}>
                        {status.label}
                      </span>
                        </div>
                  );
                })}
                        </div>
              
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                <select
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  value={orderForm.priority}
                  onChange={(e) => handlePriorityChange(e.target.value)}
                >
                  <option value="low">–ù–∏–∑–∫–∏–π</option>
                  <option value="normal">–û–±—ã—á–Ω—ã–π</option>
                  <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                  <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                </select>
                      </div>
                    </div>
              </div>
            </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ - –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
        <div className="mt-8">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
              <div className="flex items-center gap-3 mb-6">
              <FileText className="h-6 w-6 text-purple-600" />
              <h2 className="text-xl font-semibold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</h2>
              </div>
              
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span className="text-red-500">*</span>
                </label>
                  <input
                    type="text"
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 ${
                    !projectForm.name.trim() ? 'border-red-300 bg-red-50' : 'border-gray-300'
                  }`}
                  value={projectForm.name}
                  onChange={(e) => handleProjectFormChange('name', e.target.value)}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ–±–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"
                  required
                  />
                </div>
              
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                  <input
                    type="date"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  value={projectForm.deadline}
                  onChange={(e) => handleProjectFormChange('deadline', e.target.value)}
                  />
                </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <span className="text-red-500">*</span>
                </label>
                <textarea
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 ${
                    !projectForm.description.trim() ? 'border-red-300 bg-red-50' : 'border-gray-300'
                  }`}
                  rows={4}
                  value={projectForm.description}
                  onChange={(e) => handleProjectFormChange('description', e.target.value)}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ç.–¥."
                  required
                />
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">–§–∞–π–ª—ã-—á–µ—Ä—Ç–µ–∂–∏</label>
                <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-gray-400 transition-colors">
                  <div className="space-y-1 text-center">
                    <FileText className="mx-auto h-12 w-12 text-gray-400" />
                    <div className="flex text-sm text-gray-600">
                      <label
                        htmlFor="file-upload"
                        className="relative cursor-pointer bg-white rounded-md font-medium text-purple-600 hover:text-purple-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-purple-500"
                      >
                        <span>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã</span>
                  <input
                          id="file-upload"
                          name="file-upload"
                          type="file"
                          className="sr-only"
                          multiple
                          accept=".pdf,.jpg,.jpeg,.png,.dwg,.dxf"
                          onChange={(e) => setSelectedFiles(Array.from(e.target.files))}
                        />
                      </label>
                      <p className="pl-1">–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞</p>
                </div>
                    <p className="text-xs text-gray-500">PDF, JPG, PNG, DWG, DXF –¥–æ 10MB</p>
                    {selectedFiles.length > 0 && (
                      <div className="text-sm text-green-600">
                        –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {selectedFiles.length}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ - –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
        <div className="mt-8">
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-center gap-3 mb-6">
              <Package className="h-6 w-6 text-orange-600" />
              <h2 className="text-xl font-semibold text-gray-900">–°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏</h2>
            </div>
            
            <WarehouseInventoryTable
              onItemsChange={setWarehouseItems}
            />
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-8 flex justify-between items-center">
          <div className="text-sm text-gray-500">
            {isOrderSaved ? (
              <span className="text-green-600">‚úì –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</span>
            ) : (
                <div>
                <div>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: <span className="text-red-500">*</span></div>
                <div className="text-xs mt-1">
                  {!clientForm.name.trim() && <span className="text-red-500 mr-2">‚Ä¢ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</span>}
                  {!clientForm.phone.trim() && <span className="text-red-500 mr-2">‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω</span>}
                  {!projectForm.name.trim() && <span className="text-red-500 mr-2">‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</span>}
                  {!projectForm.description.trim() && <span className="text-red-500 mr-2">‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</span>}
                  {(!financialForm.totalAmount || financialForm.totalAmount <= 0) && <span className="text-red-500 mr-2">‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞</span>}
                </div>
              </div>
            )}
            </div>
          <div className="flex gap-3">
            <button
              onClick={handleSave}
              className={`flex items-center gap-2 px-6 py-3 rounded-lg transition-colors font-medium ${
                isFormReady() && !createOrderMutation.isLoading
                  ? 'bg-teal-600 text-white hover:bg-teal-700'
                  : 'bg-gray-400 text-gray-200 cursor-not-allowed'
              }`}
              disabled={!isFormReady() || createOrderMutation.isLoading}
            >
              {createOrderMutation.isLoading ? (
                <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
              ) : (
                <Save className="h-4 w-4" />
              )}
              {createOrderMutation.isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑'}
            </button>
            
            {isOrderSaved && orderForm.id && (
              <button
                onClick={() => navigate(`/orders/${orderForm.id}`)}
                className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                <FileText className="h-4 w-4" />
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateOrderNew;