import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery } from 'react-query';
import { 
  ArrowLeft, 
  Download, 
  Printer,
  FileText,
  Upload,
  X,
  Image as ImageIcon,
  Flame
} from 'lucide-react';
import { ordersAPI } from '../../services/api';
import LoadingSpinner from '../../components/UI/LoadingSpinner';
import QRCodeImage from '../../components/QRCodeImage';

const OrderSpecification = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
  const { data: order, isLoading, error } = useQuery(
    ['order', id],
    () => ordersAPI.getById(id),
    {
      enabled: !!id
    }
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
  const { data: orderItems, isLoading: itemsLoading } = useQuery(
    ['orderItems', id],
    () => ordersAPI.getById(id).then(response => response.items || []),
    {
      enabled: !!id
    }
  );

  // –î–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–∑ API)
  const [specification, setSpecification] = useState({
    productName: '–î–ò–í–ê–ù CHESTERFIELD',
    orderNumber: '',
    materials: {
      upholstery: '',
      supports: '',
      hardness: '',
      decor: '',
      mechanism: ''
    },
    dimensions: {
      width: '',
      depth: '',
      height: '',
      seatWidth: '',
      seatDepth: '',
      seatHeight: ''
    },
    comments: '',
    createdDate: new Date().toISOString().split('T')[0],
    deadline: '',
    priority: 'normal' // urgent, high, normal, low
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const [uploadedImages, setUploadedImages] = useState([]);
  const [isDragOver, setIsDragOver] = useState(false);


  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  const priorities = [
    { id: 'urgent', name: '–°—Ä–æ—á–Ω—ã–π', color: 'red', icon: Flame },
    { id: 'high', name: '–í—ã—Å–æ–∫–∏–π', color: 'orange', icon: Flame },
    { id: 'normal', name: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π', color: 'blue', icon: Flame },
    { id: 'low', name: '–ù–∏–∑–∫–∏–π', color: 'gray', icon: Flame }
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (order) {
      setSpecification(prev => ({
        ...prev,
        orderNumber: order.order_number || '',
        productName: order.project_description || order.product_name || prev.productName,
        createdDate: order.created_at ? new Date(order.created_at).toISOString().split('T')[0] : prev.createdDate,
        deadline: order.deadline ? new Date(order.deadline).toISOString().split('T')[0] : ''
      }));
    }
  }, [order]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleFieldChange = (section, field, value) => {
    setSpecification(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value
      }
    }));
  };

  const handleDirectFieldChange = (field, value) => {
    setSpecification(prev => ({
      ...prev,
      [field]: value
    }));
  };


  const handlePrint = () => {
    window.print();
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  const handleImageUpload = (files) => {
    const imageFiles = Array.from(files).filter(file => 
      file.type.startsWith('image/') || 
      file.name.toLowerCase().endsWith('.pdf') ||
      file.name.toLowerCase().endsWith('.dwg') ||
      file.name.toLowerCase().endsWith('.dxf')
    );

    imageFiles.forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const newImage = {
          id: Date.now() + Math.random(),
          name: file.name,
          type: file.type,
          size: file.size,
          data: e.target.result,
          file: file
        };
        setUploadedImages(prev => [...prev, newImage]);
      };
      reader.readAsDataURL(file);
    });
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragOver(false);
    handleImageUpload(e.dataTransfer.files);
  };

  const handleFileInput = (e) => {
    handleImageUpload(e.target.files);
  };

  const removeImage = (imageId) => {
    setUploadedImages(prev => prev.filter(img => img.id !== imageId));
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
  const generatePDF = async () => {
    try {
      // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è PDF
      const printWindow = window.open('', '_blank');
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>–ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ ${specification.orderNumber}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              line-height: 1.4;
            }
            .header { 
              margin-bottom: 30px; 
              border-bottom: 2px solid #000; 
              padding-bottom: 20px;
            }
            .product-name { 
              font-size: 24px; 
              font-weight: bold; 
              margin-bottom: 10px;
            }
            .order-number { 
              font-size: 18px; 
              color: #666;
            }
            .section { 
              margin: 20px 0; 
              background: #f5f5f5; 
              padding: 15px; 
              border-radius: 5px;
            }
            .section h3 { 
              margin: 0 0 15px 0; 
              font-size: 18px; 
              font-weight: bold;
            }
            .materials-grid { 
              display: grid; 
              grid-template-columns: 1fr 1fr; 
              gap: 10px;
            }
            .dimensions-grid { 
              display: grid; 
              grid-template-columns: repeat(3, 1fr); 
              gap: 10px;
            }
            .dimension-box { 
              border: 2px dashed #ccc; 
              padding: 10px; 
              text-align: center;
            }
            .dates-grid { 
              display: grid; 
              grid-template-columns: 1fr 1fr; 
              gap: 20px;
            }
            .image-container { 
              margin: 20px 0; 
              text-align: center;
            }
            .image-container img { 
              max-width: 100%; 
              max-height: 400px; 
              border: 1px solid #ddd;
            }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="product-name">${specification.productName}</div>
            <div class="order-number">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${specification.orderNumber}</div>
            <div class="priority" style="margin-top: 10px;">
              <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> 
              <span style="color: ${priorities.find(p => p.id === specification.priority)?.color === 'red' ? '#dc2626' : 
                priorities.find(p => p.id === specification.priority)?.color === 'orange' ? '#ea580c' : 
                priorities.find(p => p.id === specification.priority)?.color === 'blue' ? '#2563eb' : '#6b7280'};">
                üî• ${priorities.find(p => p.id === specification.priority)?.name || '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π'}
              </span>
            </div>
          </div>


          <div class="section">
            <h3>–ì–ê–ë–ê–†–ò–¢–ù–´–ï –†–ê–ó–ú–ï–†–´</h3>
            <div class="dimensions-grid">
              <div class="dimension-box">
                <div><strong>–®–ò–†–ò–ù–ê</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.width}</div>
              </div>
              <div class="dimension-box">
                <div><strong>–ì–õ–£–ë–ò–ù–ê</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.depth}</div>
              </div>
              <div class="dimension-box">
                <div><strong>–í–´–°–û–¢–ê</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.height}</div>
              </div>
              <div class="dimension-box">
                <div><strong>–®–ò–†–ò–ù–ê –ü–ú</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.seatWidth}</div>
              </div>
              <div class="dimension-box">
                <div><strong>–ì–õ–£–ë–ò–ù–ê –ü–ú</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.seatDepth}</div>
              </div>
              <div class="dimension-box">
                <div><strong>–í–´–°–û–¢–ê –ü–ú</strong></div>
                <div style="font-size: 20px; font-weight: bold;">${specification.dimensions.seatHeight}</div>
              </div>
            </div>
          </div>

          <div class="section">
            <h3>–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò / –ö–ë</h3>
            <div>${specification.comments}</div>
          </div>

          <div class="section">
            <h3>–î–ê–¢–´</h3>
            <div class="dates-grid">
              <div><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${specification.createdDate}</div>
              <div><strong>–î–µ–¥–ª–∞–π–Ω:</strong> ${specification.deadline}</div>
            </div>
          </div>

          <div class="section">
            <h3>–ü–û–ó–ò–¶–ò–ò –ó–ê–ö–ê–ó–ê</h3>
            <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
              <thead>
                <tr style="background: #f0f0f0;">
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: left;">‚Ññ</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: left;">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: center;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: center;">–ï–¥. –∏–∑–º.</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: right;">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: right;">–°—É–º–º–∞</th>
                  <th style="border: 1px solid #ccc; padding: 8px; text-align: left;">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                </tr>
              </thead>
              <tbody>
                ${order?.items && order.items.length > 0 ? order.items.map((item, index) => `
                  <tr>
                    <td style="border: 1px solid #ccc; padding: 8px;">${index + 1}</td>
                    <td style="border: 1px solid #ccc; padding: 8px; font-weight: bold;">${item.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                    <td style="border: 1px solid #ccc; padding: 8px; text-align: center;">${item.quantity || 0}</td>
                    <td style="border: 1px solid #ccc; padding: 8px; text-align: center;">${item.unit || '—à—Ç'}</td>
                    <td style="border: 1px solid #ccc; padding: 8px; text-align: right;">${item.price ? item.price.toLocaleString('ru-RU') + ' ‚ÇΩ' : '0 ‚ÇΩ'}</td>
                    <td style="border: 1px solid #ccc; padding: 8px; text-align: right; font-weight: bold;">${item.quantity && item.price ? (item.quantity * item.price).toLocaleString('ru-RU') + ' ‚ÇΩ' : '0 ‚ÇΩ'}</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">${item.description || '-'}</td>
                  </tr>
                `).join('') : '<tr><td colspan="7" style="border: 1px solid #ccc; padding: 8px; text-align: center;">–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>'}
              </tbody>
              <tfoot>
                <tr style="background: #f0f0f0; font-weight: bold;">
                  <td colspan="5" style="border: 1px solid #ccc; padding: 8px; text-align: right;">–ò–¢–û–ì–û:</td>
                  <td style="border: 1px solid #ccc; padding: 8px; text-align: right;">${order?.items ? order.items.reduce((total, item) => total + (item.quantity * item.price || 0), 0).toLocaleString('ru-RU') + ' ‚ÇΩ' : '0 ‚ÇΩ'}</td>
                  <td style="border: 1px solid #ccc; padding: 8px;"></td>
                </tr>
              </tfoot>
            </table>
          </div>

          <div class="section">
            <h3>–ü–û–î–†–û–ë–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï</h3>
            <div style="margin-top: 10px; padding: 15px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 5px;">
              <div style="white-space: pre-wrap; line-height: 1.6;">
                ${order?.project_description || order?.product_name || '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
              </div>
            </div>
          </div>

          ${uploadedImages.map(img => `
            <div class="image-container">
              <h3>–ß–µ—Ä—Ç–µ–∂ / –≠—Å–∫–∏–∑: ${img.name}</h3>
              <img src="${img.data}" alt="${img.name}" />
            </div>
          `).join('')}

          <div class="no-print" style="margin-top: 30px; text-align: center;">
            <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
              –ü–µ—á–∞—Ç—å PDF
            </button>
          </div>
        </body>
        </html>
      `;
      
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—á–∞—Ç–∏
      setTimeout(() => {
        printWindow.print();
      }, 500);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF');
    }
  };

  const handleDownload = () => {
    generatePDF();
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <p className="text-red-600 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞</p>
          <button 
            onClick={() => navigate('/orders')}
            className="btn-primary btn-md"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white print:bg-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ */}
      <div className="print:hidden bg-gray-50 p-6 border-b border-gray-200">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            <button
              onClick={() => navigate(`/orders/${id}`)}
              className="flex items-center text-gray-600 hover:text-gray-900"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É
            </button>
            
            <div className="flex items-center gap-3">
              <button
                onClick={() => console.log('Saving specification:', specification)}
                className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <FileText className="h-4 w-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              
              <button
                onClick={handleDownload}
                className="flex items-center px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
              >
                <Download className="h-4 w-4 mr-2" />
                –°–∫–∞—á–∞—Ç—å PDF
              </button>
              
              <button
                onClick={handlePrint}
                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Printer className="h-4 w-4 mr-2" />
                –ü–µ—á–∞—Ç—å
              </button>
            </div>
          </div>
          <div className="flex items-center gap-3">
            <h1 className="text-2xl font-bold text-gray-900">–ó–∞–∫–∞–∑-–Ω–∞—Ä—è–¥ #{id}</h1>
            {(() => {
              const currentPriority = priorities.find(p => p.id === specification.priority);
              const IconComponent = currentPriority?.icon || Flame;
              return (
                <div className={`flex items-center gap-2 px-3 py-1 rounded-full ${
                  currentPriority?.color === 'red' ? 'bg-red-100 text-red-700' :
                  currentPriority?.color === 'orange' ? 'bg-orange-100 text-orange-700' :
                  currentPriority?.color === 'blue' ? 'bg-blue-100 text-blue-700' :
                  'bg-gray-100 text-gray-700'
                }`}>
                  <IconComponent className="h-4 w-4" />
                  <span className="text-sm font-medium">{currentPriority?.name}</span>
                </div>
              );
            })()}
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-4xl mx-auto p-8 print:p-0">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
        <div className="mb-8">
          <div className="flex items-start gap-6 mb-4">
            {/* QR-–∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ */}
            {order?.qr_code_id && (
              <div className="flex-shrink-0">
                <QRCodeImage 
                  qrCodeId={order.qr_code_id}
                  className="border rounded"
                  style={{width: '170px', height: '170px'}}
                  alt="QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞"
                />
              </div>
            )}
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∞ –æ—Ç QR-–∫–æ–¥–∞ */}
            <div className="flex-1">
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</label>
                <input
                  type="text"
                  value={specification.orderNumber}
                  onChange={(e) => handleDirectFieldChange('orderNumber', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 text-xl font-bold"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è</label>
                <input
                  type="text"
                  value={specification.productName}
                  onChange={(e) => handleDirectFieldChange('productName', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 text-lg"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è"
                />
              </div>
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
            <div className="flex gap-2">
              {priorities.map((priority) => {
                const IconComponent = priority.icon;
                const isSelected = specification.priority === priority.id;
                
                return (
                  <button
                    key={priority.id}
                    onClick={() => handleDirectFieldChange('priority', priority.id)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg border-2 transition-all ${
                      isSelected
                        ? `border-${priority.color}-500 bg-${priority.color}-50 text-${priority.color}-700`
                        : 'border-gray-300 bg-white text-gray-700 hover:border-gray-400'
                    }`}
                  >
                    <IconComponent className={`h-4 w-4 ${
                      isSelected ? `text-${priority.color}-600` : 'text-gray-400'
                    }`} />
                    <span className="font-medium">{priority.name}</span>
                  </button>
                );
              })}
            </div>
          </div>
        </div>


        {/* –†–∞–∑–¥–µ–ª –ì–ê–ë–ê–†–ò–¢–ù–´–ï –†–ê–ó–ú–ï–†–´ */}
        <div className="bg-gray-100 p-6 mb-6">
          <h2 className="text-xl font-bold text-black mb-4">–ì–ê–ë–ê–†–ò–¢–ù–´–ï –†–ê–ó–ú–ï–†–´</h2>
          <div className="grid grid-cols-3 gap-4">
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–®–ò–†–ò–ù–ê</div>
              <input
                type="number"
                value={specification.dimensions.width}
                onChange={(e) => handleFieldChange('dimensions', 'width', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–ì–õ–£–ë–ò–ù–ê</div>
              <input
                type="number"
                value={specification.dimensions.depth}
                onChange={(e) => handleFieldChange('dimensions', 'depth', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–í–´–°–û–¢–ê</div>
              <input
                type="number"
                value={specification.dimensions.height}
                onChange={(e) => handleFieldChange('dimensions', 'height', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–®–ò–†–ò–ù–ê –ü–ú</div>
              <input
                type="number"
                value={specification.dimensions.seatWidth}
                onChange={(e) => handleFieldChange('dimensions', 'seatWidth', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–ì–õ–£–ë–ò–ù–ê –ü–ú</div>
              <input
                type="number"
                value={specification.dimensions.seatDepth}
                onChange={(e) => handleFieldChange('dimensions', 'seatDepth', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
            <div className="border-2 border-dashed border-gray-400 p-3 text-center">
              <div className="font-semibold mb-2">–í–´–°–û–¢–ê –ü–ú</div>
              <input
                type="number"
                value={specification.dimensions.seatHeight}
                onChange={(e) => handleFieldChange('dimensions', 'seatHeight', e.target.value)}
                className="w-full text-center text-xl font-bold border-none bg-transparent focus:outline-none focus:ring-2 focus:ring-teal-500 rounded"
                placeholder="0"
              />
            </div>
          </div>
        </div>

        {/* –†–∞–∑–¥–µ–ª –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò / –ö–ë */}
        <div className="bg-gray-100 p-6 mb-6">
          <h2 className="text-xl font-bold text-black mb-4">–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò / –ö–ë</h2>
          <textarea
            value={specification.comments}
            onChange={(e) => handleDirectFieldChange('comments', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500 resize-none"
            rows={3}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è"
          />
        </div>

        {/* –î–∞—Ç—ã */}
        <div className="bg-gray-100 p-6 mb-6">
          <h2 className="text-xl font-bold text-black mb-4">–î–ê–¢–´</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</label>
              <input
                type="date"
                value={specification.createdDate}
                onChange={(e) => handleDirectFieldChange('createdDate', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–î–µ–¥–ª–∞–π–Ω</label>
              <input
                type="date"
                value={specification.deadline}
                onChange={(e) => handleDirectFieldChange('deadline', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
              />
            </div>
          </div>
        </div>

        {/* –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ */}
        <div className="bg-gray-100 p-6 mb-6">
          <h2 className="text-xl font-bold text-black mb-4">–ü–û–ó–ò–¶–ò–ò –ó–ê–ö–ê–ó–ê</h2>
          {itemsLoading ? (
            <div className="text-center py-4">
              <LoadingSpinner size="md" />
              <p className="text-gray-500 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π...</p>
            </div>
          ) : order?.items && order.items.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full border border-gray-300">
                <thead className="bg-gray-200">
                  <tr>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">‚Ññ</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–ï–¥. –∏–∑–º.</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–°—É–º–º–∞</th>
                    <th className="border border-gray-300 px-4 py-2 text-left font-semibold">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                  </tr>
                </thead>
                <tbody>
                  {order.items.map((item, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="border border-gray-300 px-4 py-2">{index + 1}</td>
                      <td className="border border-gray-300 px-4 py-2 font-medium">{item.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                      <td className="border border-gray-300 px-4 py-2 text-center">{item.quantity || 0}</td>
                      <td className="border border-gray-300 px-4 py-2 text-center">{item.unit || '—à—Ç'}</td>
                      <td className="border border-gray-300 px-4 py-2 text-right">{item.price ? `${item.price.toLocaleString('ru-RU')} ‚ÇΩ` : '0 ‚ÇΩ'}</td>
                      <td className="border border-gray-300 px-4 py-2 text-right font-semibold">
                        {item.quantity && item.price ? `${(item.quantity * item.price).toLocaleString('ru-RU')} ‚ÇΩ` : '0 ‚ÇΩ'}
                      </td>
                      <td className="border border-gray-300 px-4 py-2">{item.description || '-'}</td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className="bg-gray-200">
                  <tr>
                    <td colSpan="5" className="border border-gray-300 px-4 py-2 text-right font-bold">–ò–¢–û–ì–û:</td>
                    <td className="border border-gray-300 px-4 py-2 text-right font-bold">
                      {order.items.reduce((total, item) => total + (item.quantity * item.price || 0), 0).toLocaleString('ru-RU')} ‚ÇΩ
                    </td>
                    <td className="border border-gray-300 px-4 py-2"></td>
                  </tr>
                </tfoot>
              </table>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <p className="text-lg mb-2">–ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏</p>
            </div>
          )}
        </div>

        {/* –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="bg-gray-100 p-6 mb-6">
          <h2 className="text-xl font-bold text-black mb-4">–ü–û–î–†–û–ë–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï</h2>
          <div className="bg-white p-4 rounded-lg border">
            <div className="text-gray-700 whitespace-pre-wrap">
              {order?.project_description || order?.product_name || '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
            </div>
          </div>
        </div>

        {/* –ß–µ—Ä—Ç–µ–∂ / –≠—Å–∫–∏–∑ */}
        <div className="mb-6">
          <div className="bg-gray-200 px-4 py-2 inline-block mb-4">
            <span className="font-semibold">–ß–µ—Ä—Ç–µ–∂ / –≠—Å–∫–∏–∑</span>
          </div>
          
          {/* –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
          <div 
            className={`border-2 border-dashed rounded-xl p-8 text-center transition-all cursor-pointer ${
              isDragOver 
                ? 'border-teal-500 bg-teal-50' 
                : 'border-gray-300 hover:border-teal-500 hover:bg-teal-50'
            }`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            onClick={() => document.getElementById('imageInput').click()}
          >
            <Upload className="h-10 w-10 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-600 mb-2">
              {isDragOver ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —á–µ—Ä—Ç–µ–∂–∏ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
            </p>
            <p className="text-xs text-gray-500">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, PDF, DWG, DXF
            </p>
            <input 
              id="imageInput"
              type="file" 
              multiple 
              accept="image/*,.pdf,.dwg,.dxf"
              onChange={handleFileInput}
              className="hidden" 
            />
          </div>

          {/* –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          {uploadedImages.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {uploadedImages.map((image) => (
                  <div key={image.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <ImageIcon className="h-4 w-4 text-gray-500" />
                        <span className="text-sm font-medium text-gray-900">{image.name}</span>
                      </div>
                      <button
                        onClick={() => removeImage(image.id)}
                        className="p-1 text-red-500 hover:bg-red-50 rounded transition-colors"
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                    <div className="text-xs text-gray-500 mb-2">{formatFileSize(image.size)}</div>
                    {image.type.startsWith('image/') && (
                      <img 
                        src={image.data} 
                        alt={image.name}
                        className="w-full h-32 object-cover rounded border"
                      />
                    )}
                    {!image.type.startsWith('image/') && (
                      <div className="w-full h-32 bg-gray-100 rounded border flex items-center justify-center">
                        <FileText className="h-8 w-8 text-gray-400" />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        {order && (
          <div className="bg-gray-100 p-6 mt-8">
            <h2 className="text-xl font-bold text-black mb-4">–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï</h2>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <span className="font-semibold">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span> {order.order_number}
              </div>
              <div>
                <span className="font-semibold">–ö–ª–∏–µ–Ω—Ç:</span> {order.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
              </div>
              <div>
                <span className="font-semibold">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span> {new Date(order.created_at).toLocaleDateString('ru-RU')}
              </div>
              <div>
                <span className="font-semibold">–°—Ç–∞—Ç—É—Å:</span> {order.status}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –°—Ç–∏–ª–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ */}
      <style>{`
        @media print {
          body {
            margin: 0;
            padding: 0;
          }
          
          .print\\:hidden {
            display: none !important;
          }
          
          .print\\:bg-white {
            background: white !important;
          }
          
          .print\\:p-0 {
            padding: 0 !important;
          }
          
          @page {
            margin: 1cm;
            size: A4;
          }
        }
      `}</style>

    </div>
  );
};

export default OrderSpecification;
